
// import React, { useState, useEffect } from 'react';
// import { View, Text, TouchableOpacity, StyleSheet, ScrollView, FlatList, Dimensions } from "react-native";
// import { Ionicons } from "@expo/vector-icons";
// import { firebase } from './firebaseConfig';
// import AsyncStorage from '@react-native-async-storage/async-storage';
// import { getDocs, collection, updateDoc, doc, arrayUnion, onSnapshot, getDoc } from "firebase/firestore"; // Import onSnapshot

// import { db } from "./firebaseConfig";

// const { width, height } = Dimensions.get("window");

// const HomeScreen = ({ navigation, route }) => {
//   const [userId, setUserId] = useState(null);
//   const userEmail = route?.params?.userEmail || "";
//   const [greeting, setGreeting] = useState("");
//   const [userName, setUserName] = useState("");
//   const [audits, setAudits] = useState([]);
//   const [ongoingAudits, setOngoingAudits] = useState([]);
//   const [todayTasks, setTodayTasks] = useState([]);
//   const [completedTasks, setCompletedTasks] = useState([]);
//   const [clientsData, setClientsData] = useState({});
//   const [branchesData, setBranchesData] = useState([]);
//   const [selectedStatus, setSelectedStatus] = useState("");
//   const [searchTerm, setSearchTerm] = useState("");
//   const [filterLocation, setFilterLocation] = useState("");

//   useEffect(() => {
//     let unsubscribe; // Declare unsubscribe here

//     const loadData = async () => {
//       try {
//         // Fetch audits from Firebase collection 'audits'
//         const auditRef = collection(db, "audits");

//         // Real-time listener for updates on audits
//         unsubscribe = onSnapshot(auditRef, (snapshot) => { // Initialize unsubscribe here
//           const auditData = snapshot.docs.map((doc) => ({
//             id: doc.id,
//             ...doc.data(),
//           }));
//           setAudits(auditData); // Update audits with real-time data
//         });

//         // Fetch ongoing audits from AsyncStorage
//         const ongoingAuditsData = await AsyncStorage.getItem("ongoingAudits");
//         if (ongoingAuditsData) {
//           setOngoingAudits(JSON.parse(ongoingAuditsData));
//         }

//         // Fetch clients from 'clients' collection
//         const clientsRef = collection(db, "clients");
//         const clientSnapshot = await getDocs(clientsRef);
//         const clients = {};
//         clientSnapshot.docs.forEach((doc) => {
//           clients[doc.id] = doc.data().name;
//         });
//         setClientsData(clients);

//         // Fetch branches from 'branches' collection
//         const branchesRef = collection(db, "branches");
//         const branchSnapshot = await getDocs(branchesRef);
//         const branches = branchSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setBranchesData(branches);

//         // Fetch tasks from 'tasks' collection
//         const tasksRef = collection(db, "tasks");
//         const taskSnapshot = await getDocs(tasksRef);
//         const taskData = taskSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setTodayTasks(taskData.filter(task => task.status === 'today'));
//         setCompletedTasks(taskData.filter(task => task.status === 'completed'));

//         // Fetch the logged-in user's ID
//         const userDoc = await firebase.firestore().collection('Profile').where("email", "==", userEmail).get();
//         if (!userDoc.empty) {
//           const userId = userDoc.docs[0].id;
//           setUserId(userId); // Set the logged-in user's document ID
//         }

//       } catch (error) {
//         console.error("Error fetching data:", error);
//       }

//       // Set greeting based on time
//       const currentTime = new Date().getHours();
//       setGreeting(currentTime < 12 ? "Good Morning" : currentTime < 19 ? "Good Afternoon " : "Good Evening");
//       setUserName(userEmail ? userEmail.split("@")[0] : "User");
//     };

//     loadData();

//     // Clean up the listener when the component unmounts
//     return () => {
//       if (unsubscribe) {
//         unsubscribe(); // Call unsubscribe to stop listening to updates
//       }
//     };

//   }, [userEmail]);

//   const getAvatar = (Client) => {
//     const firstLetter = Client ? Client.charAt(0).toUpperCase() : "â’¶";
//     return firstLetter;
//   };

//   const acceptAudit = async (auditId) => {
//     try {
//       const auditRef = doc(db, "audits", auditId);

//       // Update the audit to mark it as accepted and save userId in AcceptedBy
//       await updateDoc(auditRef, {
//         auditorId: userId,
//         isAccepted: true,
//         AcceptedBy: userId, // Save the user ID in the AcceptedBy field
//       });

//       // Fetch the audit document to get the userId from the AcceptedBy field
//       const auditSnapshot = await getDoc(auditRef);
//       const auditData = auditSnapshot.data();

//       if (auditData && auditData.AcceptedBy) {
//         const userRef = doc(db, "Profile", auditData.AcceptedBy);

//         // Add the auditId to the user's acceptedAuditsarray in the Profile collection
//         await updateDoc(userRef, {
//           AcceptedAudits: arrayUnion(auditId),  // Ensure no duplicates
//         });

//         console.log("Audit accepted and added to the user's AcceptedAudits!");
//       } else {
//         console.log("No AcceptedBy field found in the audit document.");
//       }

//     } catch (error) {
//       console.error("Error accepting audit:", error);
//     }
//   };

//   const completeAudit = async (auditId) => {
//     try {
//       const auditRef = doc(db, "audits", auditId);
//       const auditSnapshot = await getDoc(auditRef);
//       const auditData = auditSnapshot.data();

//       if (auditData.isAccepted) {
//         await updateDoc(auditRef, {
//           isCompleted: true,
//         });

//         console.log("Audit marked as complete!");
//       } else {
//         console.log("Audit is not accepted, cannot mark as complete.");
//       }
//     } catch (error) {
//       console.error("Error completing audit:", error);
//     }
//   };

//   const filteredAudits = audits.filter((audit) => {
//     if (selectedStatus && audit.status !== selectedStatus) {
//       return false;
//     }
//     if (filterLocation && audit.location !== filterLocation) {
//       return false;
//     }
//     if (searchTerm && !audit.name.toLowerCase().includes(searchTerm.toLowerCase())) {
//       return false;
//     }
//     return true;
//   });

//   return (
//     <View style={styles.fullScreen}>
//       <ScrollView contentContainerStyle={{ flexGrow: 1 }}>
//         <View>
//           {userId ? (
//             <Text>Welcome, User ID: {userId}</Text>
//           ) : (
//             <Text>.</Text>
//           )}
//         </View>
  
//         <View style={styles.greetingContainer}>
//           <Text style={styles.greetingText}>{greeting}, {userName}</Text>
//         </View>
  
//         <View style={styles.container}>
//           <View style={styles.taskBoxesContainer}>
//             <TouchableOpacity style={styles.taskBox}>
//               <TouchableOpacity onPress={() => navigation.navigate("UserInfo")}>
//                 <Ionicons name="calendar" size={30} color="black" style={styles.icon} />
//                 <Text style={styles.taskBoxTitle}>Today's Tasks</Text>
//                 <Text style={styles.taskBoxContent}>{todayTasks.length} Tasks</Text>
//               </TouchableOpacity>
//             </TouchableOpacity>
  
//             <TouchableOpacity style={styles.taskBox}>
//               <TouchableOpacity onPress={() => navigation.navigate("Ongoing")}>
//                 <Ionicons name="play-circle" size={30} color="black" style={styles.icon} />
//                 <Text style={styles.taskBoxTitle}>Ongoing Tasks</Text>
//                 <Text style={styles.taskBoxContent}>{ongoingAudits.length} Tasks</Text>
//               </TouchableOpacity>
//             </TouchableOpacity>
//           </View>
  
//           <TouchableOpacity style={styles.taskBox2}>
//             <TouchableOpacity onPress={() => navigation.navigate("Completed-Tasks")}>
//               <Ionicons name="checkmark-circle" size={30} color="black" style={styles.icon} />
//               <Text style={styles.taskBoxTitle}>Completed Tasks</Text>
//               <Text style={styles.taskBoxContent}>{completedTasks.length} Tasks</Text>
//             </TouchableOpacity>
//           </TouchableOpacity>
  
//           <View style={styles.upcomingAuditsContainer}>
//             <Text style={styles.upcomingAuditsText}>Upcoming Audits</Text>
  
//             <FlatList
//               data={filteredAudits}
//               renderItem={({ item }) => {
//                 const clientName = clientsData[item.clientId] || "Unknown Client";
//                 const branch = branchesData.find((branch) => branch.id === item.branchId);
//                 const branchName = branch ? branch.name : "Unknown Branch";

//                 return (
//                   <TouchableOpacity
//                     style={styles.auditItem}
//                     onPress={() => navigation.navigate("AuditDetails", { auditId: item.id })} // Fixed screen name here
//                   >
//                     <View style={styles.clientImageContainer}>
//                       <Text style={styles.clientImage}>{getAvatar(clientName)}</Text>
//                     </View>
//                     <View style={styles.auditDetails}>
//                       <Text style={styles.auditTitle}>{clientName}</Text>
//                       <Text style={styles.auditText}>Branch: {branchName}</Text>
//                       <Text style={styles.auditText}>Location: {item.location}</Text>
//                       <Text style={styles.auditText}>Date: {item.date}</Text>
//                     </View>
//                     <TouchableOpacity
//                       style={styles.acceptButton}
//                       onPress={() => acceptAudit(item.id)}
//                     >
//                       <Text style={styles.acceptButtonText}>Accept</Text>
//                     </TouchableOpacity>
//                   </TouchableOpacity>
//                 );
//               }}
//               keyExtractor={(item) => item.id}
//             />
//           </View>
//         </View>
//       </ScrollView>
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   fullScreen: {
//     flex: 1,
//   },
//   greetingContainer: {
//     paddingTop: 30,
//     paddingHorizontal: 20,
//   },
//   greetingText: {
//     fontSize: 30,
//     fontWeight: "bold",
//   },
//   container: {
//     paddingTop: 30,
//   },
//   taskBoxesContainer: {
//     flexDirection: "row",
//     justifyContent: "space-around",
//   },
//   taskBox: {
//     width: width * 0.4,
//     height: 120,
//     backgroundColor: "#F3F4F6",
//     justifyContent: "center",
//     alignItems: "center",
//     borderRadius: 15,
//     margin: 10,
//   },
//   taskBox2: {
//     width: width * 0.9,
//     height: 120,
//     backgroundColor: "#F3F4F6",
//     justifyContent: "center",
//     alignItems: "center",
//     borderRadius: 15,
//     margin: 10,
//   },
//   taskBoxTitle: {
//     fontSize: 18,
//     fontWeight: "bold",
//   },
//   taskBoxContent: {
//     fontSize: 14,
//     marginTop: 5,
//   },
//   upcomingAuditsContainer: {
//     marginTop: 20,
//     paddingHorizontal: 20,
//   },
//   upcomingAuditsText: {
//     fontSize: 22,
//     fontWeight: "bold",
//   },
//   auditItem: {
//     flexDirection: "row",
//     backgroundColor: "#FFF",
//     marginBottom: 15,
//     padding: 10,
//     borderRadius: 8,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.5,
//     elevation: 5,
//   },
//   clientImageContainer: {
//     justifyContent: "center",
//     alignItems: "center",
//     width: 50,
//     height: 50,
//     backgroundColor: "#D1D5DB",
//     borderRadius: 25,
//     marginRight: 10,
//   },
//   clientImage: {
//     fontSize: 24,
//     fontWeight: "bold",
//     color: "#FFF",
//   },
//   auditDetails: {
//     flex: 1,
//     justifyContent: "center",
//   },
//   auditTitle: {
//     fontSize: 18,
//     fontWeight: "bold",
//   },
//   auditText: {
//     fontSize: 14,
//   },
//   acceptButton: {
//     justifyContent: "center",
//     alignItems: "center",
//     backgroundColor: "#4CAF50",
//     paddingVertical: 5,
//     paddingHorizontal: 15,
//     borderRadius: 5,
//   },
//   acceptButtonText: {
//     color: "#FFF",
//     fontWeight: "bold",
//   },
// });

// export default HomeScreen;









































// import React, { useState, useEffect } from "react";
// import { View, Text, TouchableOpacity, StyleSheet, ScrollView, FlatList, Dimensions } from "react-native";
// import { Ionicons } from "@expo/vector-icons";
// import { firebase } from "./firebaseConfig";
// import AsyncStorage from "@react-native-async-storage/async-storage";
// import { getDocs, collection, doc, updateDoc, arrayUnion } from "firebase/firestore";
// import { db } from "./firebaseConfig";

// const { width } = Dimensions.get("window");

// const HomeScreen = ({ navigation, route }) => {
//   const userEmail = route?.params?.userEmail || "";
//   const [greeting, setGreeting] = useState("");
//   const [userName, setUserName] = useState("");
//   const [audits, setAudits] = useState([]);
//   const [ongoingAudits, setOngoingAudits] = useState([]);
//   const [todayTasks, setTodayTasks] = useState([]);
//   const [completedTasks, setCompletedTasks] = useState([]);
//   const [clientsData, setClientsData] = useState({});
//   const [branchesData, setBranchesData] = useState([]);

//   useEffect(() => {
//     const loadData = async () => {
//       try {
//         // Fetch audits from Firebase collection 'audits'
//         const auditRef = collection(db, "audits");
//         const snapshot = await getDocs(auditRef);
//         const auditData = snapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setAudits(auditData);

//         // Fetch ongoing audits from AsyncStorage
//         const ongoingAuditsData = await AsyncStorage.getItem("ongoingAudits");
//         if (ongoingAuditsData) {
//           setOngoingAudits(JSON.parse(ongoingAuditsData));
//         }

//         // Fetch clients from 'clients' collection
//         const clientsRef = collection(db, "clients");
//         const clientSnapshot = await getDocs(clientsRef);
//         const clients = {};
//         clientSnapshot.docs.forEach((doc) => {
//           clients[doc.id] = doc.data().name;
//         });
//         setClientsData(clients);

//         // Fetch branches from 'branches' collection
//         const branchesRef = collection(db, "branches");
//         const branchSnapshot = await getDocs(branchesRef);
//         const branches = branchSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setBranchesData(branches);

//         // Fetch tasks from 'tasks' collection
//         const tasksRef = collection(db, "tasks");
//         const taskSnapshot = await getDocs(tasksRef);
//         const taskData = taskSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setTodayTasks(taskData.filter((task) => task.status === "today"));
//         setCompletedTasks(taskData.filter((task) => task.status === "completed"));
//       } catch (error) {
//         console.error("Error fetching data:", error);
//       }

//       // Set greeting based on time
//       const currentTime = new Date().getHours();
//       setGreeting(currentTime < 12 ? "Good Morning" : currentTime < 19 ? "Good Afternoon " : "Good Evening");
//       setUserName(userEmail ? userEmail.split("@")[0] : "User");
//     };

//     loadData();
//   }, [userEmail]);

//   const getAvatar = (Client) => {
//     const firstLetter = Client ? Client.charAt(0).toUpperCase() : "â’¶";
//     return firstLetter;
//   };

//   const acceptAudit = async (auditId) => {
//     try {
//       // Retrieve userId from AsyncStorage or any other source
//       const userId = await AsyncStorage.getItem("userId");

//       if (!userId) {
//         console.error("User ID not found");
//         return;
//       }

//       // Update the auditorId in the audits collection
//       const auditRef = doc(db, "audits", auditId);
//       await updateDoc(auditRef, {
//         auditorId: userId,
//         isAccepted: true,
//       });

//       // Update the acceptedAuditsfield in the user's Profile document
//       const userRef = doc(db, "Profile", userId);
//       await updateDoc(userRef, {
//         AcceptedAudits: arrayUnion(auditId),
//       });

//       // Update local state
//       setAudits((prevAudits) =>
//         prevAudits.map((audit) =>
//           audit.id === auditId ? { ...audit, auditorId: userId, isAccepted: true } : audit
//         )
//       );

//       console.log("Audit accepted successfully");
//     } catch (error) {
//       console.error("Error accepting audit:", error);
//     }
//   };

//   return (
//     <View style={styles.fullScreen}>
//       <ScrollView contentContainerStyle={{ flexGrow: 1 }}>
//         <View style={styles.greetingContainer}>
//           <Text style={styles.greetingText}>{greeting}, {userName}</Text>
//         </View>

//         <View style={styles.container}>
//           {/* Task Boxes Section */}
//           <View style={styles.taskBoxesContainer}>
//             <TouchableOpacity style={styles.taskBox} onPress={() => navigation.navigate("UserInfo")}>
//               <Ionicons name="calendar" size={30} color="black" style={styles.icon} />
//               <Text style={styles.taskBoxTitle}>Today's Tasks</Text>
//               <Text style={styles.taskBoxContent}>{todayTasks.length} Tasks</Text>
//             </TouchableOpacity>

//             <TouchableOpacity style={styles.taskBox} onPress={() => navigation.navigate("Ongoing")}>
//               <Ionicons name="play-circle" size={30} color="black" style={styles.icon} />
//               <Text style={styles.taskBoxTitle}>Ongoing Tasks</Text>
//               <Text style={styles.taskBoxContent}>{ongoingAudits.length} Tasks</Text>
//             </TouchableOpacity>
//           </View>

//           <TouchableOpacity style={styles.taskBox2} onPress={() => navigation.navigate("Completed-Tasks")}>
//             <Ionicons name="checkmark-circle" size={30} color="black" style={styles.icon} />
//             <Text style={styles.taskBoxTitle}>Completed Tasks</Text>
//             <Text style={styles.taskBoxContent}>{completedTasks.length} Tasks</Text>
//           </TouchableOpacity>

//           {/* Upcoming Audits Section */}
//           <View style={styles.upcomingAuditsContainer}>
//             <Text style={styles.upcomingAuditsText}>Upcoming Audits</Text>

//             <FlatList
//               data={audits}
//               renderItem={({ item }) => {
//                 const clientName = clientsData[item.clientId] || "Unknown Client";
//                 const branch = branchesData.find((branch) => branch.id === item.branchId);
//                 const branchCity = branch ? branch.city : "Unknown Location";

//                 return (
//                   <View style={styles.auditItem}>
//                     <View style={styles.clientImageContainer}>
//                       <Text style={styles.clientImage}>{getAvatar(item.auditorId)}</Text>
//                     </View>
//                     <View style={styles.auditContent}>
//                       <Text style={styles.auditName}>{item.name}</Text>
//                       <Text style={styles.auditDate}>{item.date}</Text>
//                       <Text style={styles.auditBranchId}>Branch: {branch?.name || "Unknown Branch"}</Text>
//                       <Text style={styles.auditClientId}>Client: {clientName}</Text>
//                       <Text style={styles.auditCity}>Location: {branchCity}</Text>
//                       <Text style={styles.auditAuditorId}>Auditor: {item.auditorId}</Text>

//                       {!item.isAccepted && (
//                         <TouchableOpacity
//                           style={styles.acceptButton}
//                           onPress={() => acceptAudit(item.id)}
//                         >
//                           <Text style={styles.acceptButtonText}>Accept</Text>
//                         </TouchableOpacity>
//                       )}
//                     </View>
//                   </View>
//                 );
//               }}
//               keyExtractor={(item) => item.id}
//             />
//           </View>
//         </View>
//       </ScrollView>
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   fullScreen: {
//     flex: 1,
//     backgroundColor: "white",
//   },
//   greetingContainer: {
//     marginTop: 50,
//     paddingHorizontal: 20,
//   },
//   greetingText: {
//     fontSize: 24,
//     fontWeight: "bold",
//   },
//   container: {
//     padding: 20,
//   },
//   taskBoxesContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//   },
//   taskBox: {
//     width: (width - 60) / 2,
//     height: 120,
//     backgroundColor: "#f0f0f0",
//     borderRadius: 10,
//     padding: 15,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 20,
//     borderWidth: 1,
//     borderColor: "gray",
//   },
//   taskBox2: {
//     width: width - 40,
//     height: 120,
//     backgroundColor: "#f0f0f0",
//     borderRadius: 10,
//     padding: 15,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 20,
//     borderWidth: 1,
//     borderColor: "gray",
//   },
//   taskBoxTitle: {
//     fontSize: 18,
//     fontWeight: "bold",
//   },
//   taskBoxContent: {
//     fontSize: 16,
//   },
//   upcomingAuditsContainer: {
//     marginTop: 20,
//   },
//   upcomingAuditsText: {
//     fontSize: 20,
//     fontWeight: "bold",
//     marginBottom: 10,
//   },
//   auditItem: {
//     flexDirection: "row",
//     padding: 10,
//     marginBottom: 10,
//     borderRadius: 5,
//     backgroundColor: "#f9f9f9",
//     borderWidth: 1,
//     borderColor: "#ddd",
//   },
//   clientImageContainer: {
//     width: 50,
//     height: 50,
//     backgroundColor: "#ccc",
//     borderRadius: 25,
//     justifyContent: "center",
//     alignItems: "center",
//     marginRight: 10,
//   },
//   clientImage: {
//     fontSize: 20,
//     fontWeight: "bold",
//     color: "#fff",
//   },
//   auditContent: {
//     flex: 1,
//   },
//   auditName: {
//     fontSize: 16,
//     fontWeight: "bold",
//   },
//   auditDate: {
//     fontSize: 14,
//     color: "gray",
//   },
//   auditBranchId: {
//     fontSize: 14,
//     color: "gray",
//   },
//   auditClientId: {
//     fontSize: 14,
//     color: "gray",
//   },
//   auditCity: {
//     fontSize: 14,
//     color: "gray",
//   },
//   auditAuditorId: {
//     fontSize: 14,
//     color: "gray",
//   },
//   acceptButton: {
//     marginTop: 10,
//     padding: 10,
//     backgroundColor: "#4CAF50",
//     borderRadius: 5,
//     alignItems: "center",
//   },
//   acceptButtonText: {
//     color: "#fff",
//     fontWeight: "bold",
//   },
// });

// export default HomeScreen;

















// // ##############################       Running code #############################################

// import React, { useState, useEffect } from 'react'; 
// import { View, Text, TouchableOpacity, StyleSheet, ScrollView, FlatList, Dimensions } from "react-native";
// import { Ionicons } from "@expo/vector-icons";
// import { firebase } from './firebaseConfig';
// import AsyncStorage from '@react-native-async-storage/async-storage';
// import { getDocs, collection, updateDoc, doc, arrayUnion, onSnapshot, getDoc } from "firebase/firestore"; // Import onSnapshot

// import { db } from "./firebaseConfig";

// const { width, height } = Dimensions.get("window");

// const HomeScreen = ({ navigation, route }) => {
//   const [userId, setUserId] = useState(null);
//   const userEmail = route?.params?.userEmail || "";
//   const [greeting, setGreeting] = useState("");
//   const [userName, setUserName] = useState("");
//   const [audits, setAudits] = useState([]);
//   const [ongoingAudits, setOngoingAudits] = useState([]);
//   const [todayTasks, setTodayTasks] = useState([]);
//   const [completedTasks, setCompletedTasks] = useState([]);
//   const [clientsData, setClientsData] = useState({});
//   const [branchesData, setBranchesData] = useState([]);
//   const [selectedStatus, setSelectedStatus] = useState("");
//   const [searchTerm, setSearchTerm] = useState("");
//   const [filterLocation, setFilterLocation] = useState("");

//   useEffect(() => {
//     const loadData = async () => {
//       try {
//         // Fetch audits from Firebase collection 'audits'
//         const auditRef = collection(db, "audits");

//         // Real-time listener for updates on audits
//         const unsubscribe = onSnapshot(auditRef, (snapshot) => {
//           const auditData = snapshot.docs.map((doc) => ({
//             id: doc.id,
//             ...doc.data(),
//           }));
//           setAudits(auditData); // Update audits with real-time data
//         });

//         // Fetch ongoing audits from AsyncStorage
//         const ongoingAuditsData = await AsyncStorage.getItem("ongoingAudits");
//         if (ongoingAuditsData) {
//           setOngoingAudits(JSON.parse(ongoingAuditsData));
//         }

//         // Fetch clients from 'clients' collection
//         const clientsRef = collection(db, "clients");
//         const clientSnapshot = await getDocs(clientsRef);
//         const clients = {};
//         clientSnapshot.docs.forEach((doc) => {
//           clients[doc.id] = doc.data().name;
//         });
//         setClientsData(clients);

//         // Fetch branches from 'branches' collection
//         const branchesRef = collection(db, "branches");
//         const branchSnapshot = await getDocs(branchesRef);
//         const branches = branchSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setBranchesData(branches);

//         // Fetch tasks from 'tasks' collection
//         const tasksRef = collection(db, "tasks");
//         const taskSnapshot = await getDocs(tasksRef);
//         const taskData = taskSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setTodayTasks(taskData.filter(task => task.status === 'today'));
//         setCompletedTasks(taskData.filter(task => task.status === 'completed'));

//         // Fetch the logged-in user's ID
//         const userDoc = await firebase.firestore().collection('Profile').where("email", "==", userEmail).get();
//         if (!userDoc.empty) {
//           const userId = userDoc.docs[0].id;
//           setUserId(userId); // Set the logged-in user's document ID
//         }

//       } catch (error) {
//         console.error("Error fetching data:", error);
//       }

//       // Set greeting based on time
//       const currentTime = new Date().getHours();
//       setGreeting(currentTime < 12 ? "Good Morning" : currentTime < 19 ? "Good Afternoon " : "Good Evening");
//       setUserName(userEmail ? userEmail.split("@")[0] : "User");
//     };

//     loadData();

//     // Clean up the listener when the component unmounts
//     return () => {
//       if (typeof unsubscribe === "function") {
//         unsubscribe(); // Make sure unsubscribe is a function before calling it
//       }
//     };

//   }, [userEmail]);
//   const getAvatar = (Client) => {
//     // Check if 'Client' is a valid string
//     const firstLetter = Client && typeof Client === 'string' ? Client.charAt(0).toUpperCase() : "â’¶";
//     return firstLetter;
//   };
  
//   const acceptAudit = async (auditId) => {
//     try {
//       const auditRef = doc(db, "audits", auditId);
//       await updateDoc(auditRef, {
//         auditorId: userId,
//         isAccepted: true,
//       });

//       if (userId) {
//         const userRef = doc(db, "Profile", userId);
//         await updateDoc(userRef, {
//           AcceptedAudits: arrayUnion(auditId),
//         });

//         console.log("Audit accepted successfully!");
//       } else {
//         console.log("User ID is not available.");
//       }
//     } catch (error) {
//       console.error("Error accepting audit:", error);
//     }
//   };

//   const completeAudit = async (auditId) => {
//     try {
//       const auditRef = doc(db, "audits", auditId);
//       const auditSnapshot = await getDoc(auditRef);
//       const auditData = auditSnapshot.data();

//       if (auditData.isAccepted) {
//         await updateDoc(auditRef, {
//           isCompleted: true,
//         });

//         console.log("Audit marked as complete!");
//       } else {
//         console.log("Audit is not accepted, cannot mark as complete.");
//       }
//     } catch (error) {
//       console.error("Error completing audit:", error);
//     }
//   };

//   const filteredAudits = audits.filter((audit) => {
//     if (selectedStatus && audit.status !== selectedStatus) {
//       return false;
//     }
//     if (filterLocation && audit.location !== filterLocation) {
//       return false;
//     }
//     if (searchTerm && !audit.name.toLowerCase().includes(searchTerm.toLowerCase())) {
//       return false;
//     }
//     return true;
//   });

//   return (
//     <View style={styles.fullScreen}>
//       <ScrollView contentContainerStyle={{ flexGrow: 1 }}>
//         <View>
//           {userId ? (
//             <Text>Welcome, User ID: {userId}</Text>
//           ) : (
//             <Text>.</Text>
//           )}
//         </View>
  
//         <View style={styles.greetingContainer}>
//           <Text style={styles.greetingText}>{greeting}, {userName}</Text>
//         </View>
  
//         <View style={styles.container}>
//           <View style={styles.taskBoxesContainer}>
//             <TouchableOpacity style={styles.taskBox}>
//               <TouchableOpacity onPress={() => navigation.navigate("UserInfo")}>
//                 <Ionicons name="calendar" size={30} color="black" style={styles.icon} />
//                 <Text style={styles.taskBoxTitle}>Today's Tasks</Text>
//                 <Text style={styles.taskBoxContent}>{todayTasks.length} Tasks</Text>
//               </TouchableOpacity>
//             </TouchableOpacity>
  
//             <TouchableOpacity style={styles.taskBox}>
//               <TouchableOpacity onPress={() => navigation.navigate("Ongoing")}>
//                 <Ionicons name="play-circle" size={30} color="black" style={styles.icon} />
//                 <Text style={styles.taskBoxTitle}>Ongoing Tasks</Text>
//                 <Text style={styles.taskBoxContent}>{ongoingAudits.length} Tasks</Text>
//               </TouchableOpacity>
//             </TouchableOpacity>
//           </View>
  
//           <TouchableOpacity style={styles.taskBox2}>
//             <TouchableOpacity onPress={() => navigation.navigate("Completed-Tasks")}>
//               <Ionicons name="checkmark-circle" size={30} color="black" style={styles.icon} />
//               <Text style={styles.taskBoxTitle}>Completed Tasks</Text>
//               <Text style={styles.taskBoxContent}>{completedTasks.length} Tasks</Text>
//             </TouchableOpacity>
//           </TouchableOpacity>
  
//           <View style={styles.upcomingAuditsContainer}>
//             <Text style={styles.upcomingAuditsText}>Upcoming Audits</Text>
  
//             <FlatList
//               data={filteredAudits}
//               renderItem={({ item }) => {
//                 const clientName = clientsData[item.clientId] || "Unknown Client";
//                 const branch = branchesData.find((branch) => branch.id === item.branchId);
//                 const branchCity = branch ? branch.city : "Unknown Location";
  
//                 return (
//                   <TouchableOpacity
//                     style={styles.auditItem}
//                     onPress={() => navigation.navigate("AuditDetails", { audit: item })}
//                   >
//                     <View style={styles.clientImageContainer}>
//                       <Text style={styles.clientImage}>{getAvatar(item.auditorId)}</Text>
//                     </View>
//                     <View style={styles.auditContent}>
//                       <Text style={styles.auditTitle}>{item.name}</Text>
//                       <Text style={styles.auditDetails}>Location: {branchCity}</Text>
//                       <Text style={styles.auditDetails}>Client: {clientName}</Text>
//                       <Text style={styles.auditDetails}>Date: {item.date}</Text>
  
//                       {item.isAccepted ? (
//                         <Text style={styles.acceptedText}>Accepted</Text>
//                       ) : (
//                         <TouchableOpacity
//                           style={styles.acceptButton}
//                           onPress={() => acceptAudit(item.id)}
//                         >
//                           <Text style={styles.acceptButtonText}>Accept Audit</Text>
//                         </TouchableOpacity>
//                       )}
//                     </View>
//                   </TouchableOpacity>
//                 );
//               }}
//               keyExtractor={(item) => item.id}
//             />
//           </View>
//         </View>
//       </ScrollView>
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//     fullScreen: {
//       flex: 1,
//       backgroundColor: "#f5f5f5",
//     },
//     greetingContainer: {
//       padding: 15,
//       backgroundColor: "#6200ea",
//     },
//     greetingText: {
//       color: "#fff",
//       fontSize: 18,
//       fontWeight: "bold",
//     },
//     container: {
//       padding: 20,
//     },
//       acceptButtonText: {
//           color: "#fff",
//           fontWeight: "bold",
//         },
//     taskBoxesContainer: {
//       flexDirection: "row",
//       justifyContent: "space-between",
//       marginBottom: 20,
//     },
//     taskBox: {
//       width: (width - 60) / 2,
//       backgroundColor: "#fff",
//       padding: 15,
//       borderRadius: 10,
//       elevation: 3,
//       alignItems: "center",
//       justifyContent: "center",
//     },
//     taskBoxTitle: {
//       fontSize: 16,
//       fontWeight: "bold",
//       marginTop: 10,
//     },
//     taskBoxContent: {
//       fontSize: 14,
//       marginTop: 5,
//     },
//     taskBox2: {
//       backgroundColor: "#fff",
//       padding: 15,
//       borderRadius: 10,
//       elevation: 3,
//       marginBottom: 20,
//     },
//     upcomingAuditsContainer: {
//       backgroundColor: "#fff",
//       padding: 20,
//       borderRadius: 10,
//       elevation: 3,
//     },
//     upcomingAuditsText: {
//       fontSize: 18,
//       fontWeight: "bold",
//       marginBottom: 15,
//     },
//     auditItem: {
//       flexDirection: "row",
//       justifyContent: "space-between",
//       padding: 10,
//       borderBottomWidth: 1,
//       borderColor: "#ddd",
//     },
//     clientImageContainer: {
//       width: 50,
//       height: 50,
//       borderRadius: 50,
//       backgroundColor: "#6200ea",
//       justifyContent: "center",
//       alignItems: "center",
//     },
//     clientImage: {
//       color: "#fff",
//       fontSize: 22,
//       fontWeight: "bold",
//     },
//     auditContent: {
//       flex: 1,
//       paddingLeft: 10,
//     },
//     auditName: {
//       fontSize: 16,
//       fontWeight: "bold",
//     },
//     auditLocation: {
//       fontSize: 14,
//       color: "#888",
//     },
//     actionsContainer: {
//       justifyContent: "center",
//       alignItems: "center",
//     },
//     acceptButton: {
//       backgroundColor: "#4caf50",
//       padding: 10,
//       borderRadius: 5,
//     },
//     completeButton: {
//       backgroundColor: "#4caf50",
//       padding: 10,
//       borderRadius: 5,
//     },
//     buttonText: {
//       color: "#fff",
//       fontSize: 14,
//       fontWeight: "bold",
//     },
//   });
  
//   export default HomeScreen;
  
  
  
  
  






  
  
// import React, { useState, useEffect } from 'react'; 
// import { View, Text, TouchableOpacity, StyleSheet, ScrollView, FlatList, Dimensions } from "react-native";
// import { Ionicons } from "@expo/vector-icons";
// import { firebase } from './firebaseConfig';
// import AsyncStorage from '@react-native-async-storage/async-storage';
// import { getDocs, collection, updateDoc, doc, arrayUnion, onSnapshot, getDoc } from "firebase/firestore"; // Import onSnapshot

// import { db } from "./firebaseConfig";

// const { width, height } = Dimensions.get("window");

// const HomeScreen = ({ navigation, route }) => {
//   const [userId, setUserId] = useState(null);
//   const userEmail = route?.params?.userEmail || "";
//   const [greeting, setGreeting] = useState("");
//   const [userName, setUserName] = useState("");
//   const [audits, setAudits] = useState([]);
//   const [ongoingAudits, setOngoingAudits] = useState([]);
//   const [todayTasks, setTodayTasks] = useState([]);
//   const [completedTasks, setCompletedTasks] = useState([]);
//   const [clientsData, setClientsData] = useState({});
//   const [branchesData, setBranchesData] = useState([]);
//   const [selectedStatus, setSelectedStatus] = useState("");
//   const [searchTerm, setSearchTerm] = useState("");
//   const [filterLocation, setFilterLocation] = useState("");

//   useEffect(() => {
//     const loadData = async () => {
//       try {
//         // Fetch audits from Firebase collection 'audits'
//         const auditRef = collection(db, "audits");
        
//         // Real-time listener for updates on audits
//         const unsubscribe = onSnapshot(auditRef, (snapshot) => {
//           const auditData = snapshot.docs.map((doc) => ({
//             id: doc.id,
//             ...doc.data(),
//           }));
//           setAudits(auditData); // Update audits with real-time data
//         });

//         // Fetch ongoing audits from AsyncStorage
//         const ongoingAuditsData = await AsyncStorage.getItem("ongoingAudits");
//         if (ongoingAuditsData) {
//           setOngoingAudits(JSON.parse(ongoingAuditsData));
//         }

//         // Fetch clients from 'clients' collection
//         const clientsRef = collection(db, "clients");
//         const clientSnapshot = await getDocs(clientsRef);
//         const clients = {};
//         clientSnapshot.docs.forEach((doc) => {
//           clients[doc.id] = doc.data().name;
//         });
//         setClientsData(clients);

//         // Fetch branches from 'branches' collection
//         const branchesRef = collection(db, "branches");
//         const branchSnapshot = await getDocs(branchesRef);
//         const branches = branchSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setBranchesData(branches);

//         // Fetch tasks from 'tasks' collection
//         const tasksRef = collection(db, "tasks");
//         const taskSnapshot = await getDocs(tasksRef);
//         const taskData = taskSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setTodayTasks(taskData.filter(task => task.status === 'today'));
//         setCompletedTasks(taskData.filter(task => task.status === 'completed'));

//         // Fetch the logged-in user's ID
//         const userDoc = await firebase.firestore().collection('Profile').where("email", "==", userEmail).get();
//         if (!userDoc.empty) {
//           const userId = userDoc.docs[0].id;
//           setUserId(userId); // Set the logged-in user's document ID
//         }

//       } catch (error) {
//         console.error("Error fetching data:", error);
//       }

//       // Set greeting based on time
//       const currentTime = new Date().getHours();
//       setGreeting(currentTime < 12 ? "Good Morning" : currentTime < 19 ? "Good Afternoon " : "Good Evening");
//       setUserName(userEmail ? userEmail.split("@")[0] : "User");
//     };

//     loadData();

//     // Clean up the listener when the component unmounts
//     return () => {
//       if (unsubscribe) {
//         unsubscribe();
//       }
//     };

//   }, [userEmail]);

//   const getAvatar = (Client) => {
//     const firstLetter = Client ? Client.charAt(0).toUpperCase() : "â’¶";
//     return firstLetter;
//   };

//   const acceptAudit = async (auditId) => {
//     try {
//       // Ensure userId is available before proceeding
//       if (!userId) {
//         console.log("User ID is not available.");
//         return;
//       }

//       // Update the audit to mark it as accepted
//       const auditRef = doc(db, "audits", auditId);
//       await updateDoc(auditRef, {
//         auditorId: userId, // Update the auditorId in the audit document
//         isAccepted: true, // Mark the audit as accepted
//       });

//       // Log audit acceptance
//       console.log(`Audit ${auditId} accepted and marked with auditorId ${userId}`);

//       // Add the auditId to the 'AcceptedAudits' array in the user's profile
//       const userRef = doc(db, "Profile", userId);

//       // Use arrayUnion to safely add the audit ID to the acceptedAuditsfield
//       await updateDoc(userRef, {
//         AcceptedAudits: arrayUnion(auditId),
//       });

//       // Log successful update to user's profile
//       console.log(`Audit ID ${auditId} added to user's acceptedAuditsfield!`);

//     } catch (error) {
//       console.error("Error accepting audit:", error);
//     }
//   };

//   const completeAudit = async (auditId) => {
//     try {
//       const auditRef = doc(db, "audits", auditId);
//       const auditSnapshot = await getDoc(auditRef);
//       const auditData = auditSnapshot.data();

//       if (auditData.isAccepted) {
//         await updateDoc(auditRef, {
//           isCompleted: true,
//         });

//         console.log("Audit marked as complete!");
//       } else {
//         console.log("Audit is not accepted, cannot mark as complete.");
//       }
//     } catch (error) {
//       console.error("Error completing audit:", error);
//     }
//   };

//   const filteredAudits = audits.filter((audit) => {
//     if (selectedStatus && audit.status !== selectedStatus) {
//       return false;
//     }
//     if (filterLocation && audit.location !== filterLocation) {
//       return false;
//     }
//     if (searchTerm && !audit.name.toLowerCase().includes(searchTerm.toLowerCase())) {
//       return false;
//     }
//     return true;
//   });

//   return (
//     <View style={styles.fullScreen}>
//       <ScrollView contentContainerStyle={{ flexGrow: 1 }}>
//         <View>
//           {userId ? (
//             <Text>Welcome, User ID: {userId}</Text>
//           ) : (
//             <Text>.</Text>
//           )}
//         </View>
  
//         <View style={styles.greetingContainer}>
//           <Text style={styles.greetingText}>{greeting}, {userName}</Text>
//         </View>
  
//         <View style={styles.container}>
//           <View style={styles.taskBoxesContainer}>
//             <TouchableOpacity style={styles.taskBox}>
//               <TouchableOpacity onPress={() => navigation.navigate("UserInfo")}>
//                 <Ionicons name="calendar" size={30} color="black" style={styles.icon} />
//                 <Text style={styles.taskBoxTitle}>Today's Tasks</Text>
//                 <Text style={styles.taskBoxContent}>{todayTasks.length} Tasks</Text>
//               </TouchableOpacity>
//             </TouchableOpacity>
  
//             <TouchableOpacity style={styles.taskBox}>
//               <TouchableOpacity onPress={() => navigation.navigate("Ongoing")}>
//                 <Ionicons name="play-circle" size={30} color="black" style={styles.icon} />
//                 <Text style={styles.taskBoxTitle}>Ongoing Tasks</Text>
//                 <Text style={styles.taskBoxContent}>{ongoingAudits.length} Tasks</Text>
//               </TouchableOpacity>
//             </TouchableOpacity>
//           </View>
  
//           <TouchableOpacity style={styles.taskBox2}>
//             <TouchableOpacity onPress={() => navigation.navigate("Completed-Tasks")}>
//               <Ionicons name="checkmark-circle" size={30} color="black" style={styles.icon} />
//               <Text style={styles.taskBoxTitle}>Completed Tasks</Text>
//               <Text style={styles.taskBoxContent}>{completedTasks.length} Tasks</Text>
//             </TouchableOpacity>
//           </TouchableOpacity>
  
//           <View style={styles.upcomingAuditsContainer}>
//             <Text style={styles.upcomingAuditsText}>Upcoming Audits</Text>
  
//             <FlatList
//               data={filteredAudits}
//               renderItem={({ item }) => {
//                 const clientName = clientsData[item.clientId] || "Unknown Client";
//                 const branch = branchesData.find((branch) => branch.id === item.branchId);
//                 const branchCity = branch ? branch.city : "Unknown Location";
  
//                 return (
//                   <TouchableOpacity
//                     style={styles.auditItem}
//                     onPress={() => navigation.navigate("AuditDetails", { audit: item })}
//                   >
//                     <View style={styles.clientImageContainer}>
//                       <Text style={styles.clientImage}>{getAvatar(item.auditorId)}</Text>
//                     </View>
//                     <View style={styles.auditContent}>
//                       <Text style={styles.auditTitle}>Audit: {item.auditName}</Text>
//                       <Text style={styles.clientName}>Client: {clientName}</Text>
//                       <Text style={styles.branch}>Branch: {branchCity}</Text>
//                     </View>
//                     <View style={styles.actionButtonsContainer}>
//                       <TouchableOpacity
//                         style={styles.acceptButton}
//                         onPress={() => acceptAudit(item.id)}
//                       >
//                         <Text style={styles.acceptButtonText}>Accept</Text>
//                       </TouchableOpacity>
//                       <TouchableOpacity
//                         style={styles.rejectButton}
//                         onPress={() => console.log("Reject audit")}
//                       >
//                         <Text style={styles.rejectButtonText}>Reject</Text>
//                       </TouchableOpacity>
//                     </View>
//                   </TouchableOpacity>
//                 );
//               }}
//               keyExtractor={(item) => item.id}
//             />
//           </View>
//         </View>
//       </ScrollView>
//     </View>
//   );
// };
  
// const styles = StyleSheet.create({
//   fullScreen: {
//     flex: 1,
//     backgroundColor: "#f5f5f5",
//   },
//   greetingContainer: {
//     padding: 20,
//     backgroundColor: "#fff",
//   },
//   greetingText: {
//     fontSize: 24,
//     fontWeight: "bold",
//     color: "#333",
//   },
//   container: {
//     flex: 1,
//     margin: 10,
//   },
//   taskBoxesContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     marginBottom: 20,
//   },
//   taskBox: {
//     backgroundColor: "#fff",
//     padding: 10,
//     width: "48%",
//     borderRadius: 10,
//     alignItems: "center",
//   },
//   taskBox2: {
//     backgroundColor: "#fff",
//     padding: 10,
//     width: "100%",
//     borderRadius: 10,
//     alignItems: "center",
//     marginBottom: 20,
//   },
//   taskBoxTitle: {
//     fontSize: 18,
//     fontWeight: "bold",
//   },
//   taskBoxContent: {
//     fontSize: 14,
//     color: "#555",
//   },
//   upcomingAuditsContainer: {
//     marginBottom: 20,
//   },
//   upcomingAuditsText: {
//     fontSize: 22,
//     fontWeight: "bold",
//     marginBottom: 10,
//   },
//   auditItem: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     padding: 15,
//     marginVertical: 5,
//     backgroundColor: "#fff",
//     borderRadius: 10,
//     alignItems: "center",
//   },
//   clientImageContainer: {
//     justifyContent: "center",
//     alignItems: "center",
//     marginRight: 10,
//   },
//   clientImage: {
//     backgroundColor: "#dcdcdc",
//     width: 40,
//     height: 40,
//     borderRadius: 20,
//     justifyContent: "center",
//     alignItems: "center",
//     textAlign: "center",
//     lineHeight: 40,
//     fontSize: 18,
//   },
//   auditContent: {
//     flex: 1,
//   },
//   auditTitle: {
//     fontSize: 16,
//     fontWeight: "bold",
//   },
//   clientName: {
//     fontSize: 14,
//     color: "#555",
//   },
//   branch: {
//     fontSize: 14,
//     color: "#555",
//   },
//   actionButtonsContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//   },
//   acceptButton: {
//     backgroundColor: "#4CAF50",
//     padding: 8,
//     borderRadius: 5,
//     marginRight: 10,
//   },
//   rejectButton: {
//     backgroundColor: "#f44336",
//     padding: 8,
//     borderRadius: 5,
//   },
//   acceptButtonText: {
//     color: "#fff",
//     fontWeight: "bold",
//   },
//   rejectButtonText: {
//     color: "#fff",
//     fontWeight: "bold",
//   },
// });

// export default HomeScreen;






























// import React, { useState, useEffect } from "react";
// import {
//   View,
//   Text,
//   TouchableOpacity,
//   StyleSheet,
//   ScrollView,
//   FlatList,
//   Dimensions,
//   Alert,
// } from "react-native";
// import { Ionicons } from "@expo/vector-icons";
// import { firebase } from "./firebaseConfig";
// import AsyncStorage from "@react-native-async-storage/async-storage";
// import { getDocs, collection, updateDoc, doc, arrayUnion } from "firebase/firestore";
// import { db } from "./firebaseConfig";

// const { width, height } = Dimensions.get("window");

// const HomeScreen = ({ navigation, route }) => {
//   const [userId, setUserId] = useState(null);
//   const userEmail = route?.params?.userEmail || "";
//   const [greeting, setGreeting] = useState("");
//   const [userName, setUserName] = useState("");
//   const [audits, setAudits] = useState([]);
//   const [ongoingAudits, setOngoingAudits] = useState([]);
//   const [todayTasks, setTodayTasks] = useState([]);
//   const [completedTasks, setCompletedTasks] = useState([]);
//   const [clientsData, setClientsData] = useState({});
//   const [branchesData, setBranchesData] = useState([]);
//   const [selectedStatus, setSelectedStatus] = useState("");
//   const [searchTerm, setSearchTerm] = useState("");
//   const [filterLocation, setFilterLocation] = useState("");
//   const [todayTasksCount, setTodayTasksCount] = useState(0);
//   const [completedTasksCount, setCompletedTasksCount] = useState(0); 
//   const [ongoingTasksCount, setOngoingTasksCount] = useState(0); 

//   useEffect(() => {
//     const loadData = async () => {
//       try {
//         const auditRef = collection(db, "audits");
//         const snapshot = await getDocs(auditRef);
//         const auditData = snapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setAudits(auditData);
        
// const today = new Date().toISOString().split("T")[0]; // Get today's date
// const todayCount = auditData.filter((audit) => audit.date === today).length;
// const ongoingCount = auditData.filter((audit) => audit.isAccepted && !audit.isComplete).length;
// const completedCount = auditData.filter((audit) => audit.isComplete).length;

// setTodayTasksCount(todayCount);
// setOngoingTasksCount(ongoingCount);
// setCompletedTasksCount(completedCount);


//         const ongoingAuditsData = await AsyncStorage.getItem("ongoingAudits");
//         if (ongoingAuditsData) {
//           setOngoingAudits(JSON.parse(ongoingAuditsData));
//         }

//         const clientsRef = collection(db, "clients");
//         const clientSnapshot = await getDocs(clientsRef);
//         const clients = {};
//         clientSnapshot.docs.forEach((doc) => {
//           clients[doc.id] = doc.data().name;
//         });
//         setClientsData(clients);

//         const branchesRef = collection(db, "branches");
//         const branchSnapshot = await getDocs(branchesRef);
//         const branches = branchSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setBranchesData(branches);

//         const tasksRef = collection(db, "tasks");
//         const taskSnapshot = await getDocs(tasksRef);
//         const taskData = taskSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setTodayTasks(taskData.filter((task) => task.status === "today"));
//         setCompletedTasks(taskData.filter((task) => task.status === "completed"));

//         const userDoc = await firebase
//           .firestore()
//           .collection("Profile")
//           .where("email", "==", userEmail)
//           .get();
//         if (!userDoc.empty) {
//           const userId = userDoc.docs[0].id;
//           setUserId(userId);
//         }
//       } catch (error) {
//         console.error("Error fetching data:", error);
//       }

//       const currentTime = new Date().getHours();
//       setGreeting(
//         currentTime < 12
//           ? "Good Morning"
//           : currentTime < 19
//           ? "Good Afternoon"
//           : "Good Evening"
//       );
//       setUserName(userEmail ? userEmail.split("@")[0] : "Auditor");
//     };

//     loadData();
//   }, [userEmail]);

//   // const acceptAudit = async (auditId) => {
//   //   try {
//   //     const auditRef = doc(db, "audits", auditId);
//   //     await updateDoc(auditRef, {
//   //       auditorId: userId,
//   //       isAccepted: true,
//   //     });

//   //     if (userId) {
//   //       const userRef = doc(db, "Profile", userId);
//   //       await updateDoc(userRef, {
//   //         AcceptedAudits: arrayUnion(auditId),
//   //       });

//   //       console.log("Audit accepted successfully!");
//   //     } else {
//   //       console.log("User ID is not available.");
//   //     }
//   //   } catch (error) {
//   //     console.error("Error accepting audit:", error);
//   //   }
//   // };

//   // const filteredAudits = audits.filter((audit) => {
//   //   if (selectedStatus && audit.status !== selectedStatus) {
//   //     return false;
//   //   }
//   //   if (filterLocation && audit.location !== filterLocation) {
//   //     return false;
//   //   }
//   //   if (searchTerm && !audit.name.toLowerCase().includes(searchTerm.toLowerCase())) {
//   //     return false;
//   //   }
//   //   if (audit.isAccepted === false) {
//   //     return false;
//   //   }
//   //   return true;
//   // });
  

//   const filteredAudits = audits.filter((audit) => {
//     // Filter audits based on the selectedStatus, filterLocation, searchTerm, and AcceptedBy
//     if (selectedStatus && audit.status !== selectedStatus) {
//       return false;
//     }
//     if (filterLocation && audit.location !== filterLocation) {
//       return false;
//     }
//     if (searchTerm && !audit.name.toLowerCase().includes(searchTerm.toLowerCase())) {
//       return false;
//     }
//     // Exclude audits that are already accepted by the current user
//     if (audit.AcceptedBy && audit.AcceptedBy.includes(userId)) {
//       return false;
//     }
//     return true;
//   });
  
//   const acceptAudit = async (auditId) => {
//     try {
//       const auditRef = doc(db, "audits", auditId);
//       await updateDoc(auditRef, {
//         auditorId: userId,
//         isAccepted: true,
//         AcceptedBy: arrayUnion(userId), // Add the current userId to the AcceptedBy array
//       });
  
//       if (userId) {
//         const userRef = doc(db, "Profile", userId);
//         await updateDoc(userRef, {
//           AcceptedAudits: arrayUnion(auditId),
//         });
  
//         console.log("Audit accepted successfully!");
//       } else {
//         console.log("User ID is not available.");
//       }
  
//       // Update the local audits state to reflect changes
//       setAudits((prevAudits) =>
//         prevAudits.map((audit) =>
//           audit.id === auditId
//             ? { ...audit, isAccepted: true, AcceptedBy: [...(audit.AcceptedBy || []), userId] }
//             : audit
//         )
//       );
//     } catch (error) {
//       console.error("Error accepting audit:", error);
//     }
//   };
  

//   const logout = () => {
//     Alert.alert(
//       "Logout",
//       "Are you sure you want to logout?",
//       [
//         {
//           text: "Cancel",
//           style: "cancel",
//         },
//         {
//           text: "Yes",
//           onPress: () => {
//             AsyncStorage.clear();
//             navigation.replace("LoginScreen");
//           },
//         },
//       ],
//       { cancelable: false }
//     );
//   };


//   return (
//     <View style={styles.fullScreen}>
//       <View>
//         {userId ? <Text>Welcome, User ID: {userId}</Text> : <Text>.</Text>}
//       </View>
//       <ScrollView contentContainerStyle={{ flexGrow: 1 }}>
//         <View style={styles.topRightIconContainer}>
         
//         </View>
//         <View style={styles.greetingContainer}>
//           <Text style={styles.greetingText}>
//             {greeting}, {userName}
//           </Text>
//         </View>

//         <View style={styles.container}>
//           <View style={styles.taskBoxesContainer}>
//             <TouchableOpacity style={styles.taskBox}>
//               <TouchableOpacity onPress={() => navigation.navigate("UserInfo")}>
//                 <Ionicons name="calendar" size={30} color="black" style={styles.icon} />
//                 <Text style={styles.taskBoxTitle}>Today's Tasks</Text>
//                 <Text style={styles.taskBoxContent}>{todayTasksCount} Tasks</Text>
//               </TouchableOpacity>
//             </TouchableOpacity>

//             <TouchableOpacity style={styles.taskBox}>
//               <TouchableOpacity onPress={() => navigation.navigate("Ongoing")}>
//                 <Ionicons name="play-circle" size={30} color="black" style={styles.icon} />
//                 <Text style={styles.taskBoxTitle}>Ongoing Tasks</Text>
//                 <Text style={styles.taskBoxContent}>{ongoingTasksCount} Tasks</Text>
//               </TouchableOpacity>
//             </TouchableOpacity>
//           </View>

//           <TouchableOpacity style={styles.taskBox2}>
//             <TouchableOpacity onPress={() => navigation.navigate("CompletedTasks")}>
//               <Ionicons name="checkmark-circle" size={30} color="black" style={styles.icon} />
//               <Text style={styles.taskBoxTitle}>Completed Tasks</Text>
//               <Text style={styles.taskBoxContent}>{completedTasksCount} Tasks</Text>
//             </TouchableOpacity>
//           </TouchableOpacity>



//           <View style={styles.upcomingAuditsContainer}>
//             <Text style={styles.upcomingAuditsText}>Upcoming Audits</Text>

//             <FlatList
//               data={filteredAudits}
//               renderItem={({ item }) => (
//                 <TouchableOpacity
//                   style={styles.auditItem}
//                   onPress={() => navigation.navigate("AuditDetails", { audit: item })}
//                 >
//                   <View style={styles.auditContent}>
//                     <Text style={styles.auditName}>{item.name}</Text>
//                     <Text style={styles.auditLocation}>
//                       {clientsData[item.clientId] || "Unknown Client"}
//                     </Text>
//                     <Text style={styles.auditLocation}>
//                       {branchesData.find((branch) => branch.id === item.branchId)?.city ||
//                         "Unknown Location"}
//                     </Text>
//                   </View>
//                   <View style={styles.actionsContainer}>
//                     <TouchableOpacity
//                       style={styles.acceptButton}
//                       onPress={() => navigation.navigate("AuditDetails", { audit: item })}
//                     >
//                       <Text style={styles.buttonText}>See More</Text>
//                     </TouchableOpacity>
//                   </View>
//                 </TouchableOpacity>
//               )}
//               keyExtractor={(item) => item.id}
//             />
//           </View>
//         </View>
//       </ScrollView>
//     </View>
//   );
// };



// const styles = StyleSheet.create({
//   fullScreen: {
//     flex: 1,
//     backgroundColor: "#f5f5f5",
//   },
//   greetingContainer: {
//     padding: 15,
//     backgroundColor: "#6200ea",
//   },
//   greetingText: {
//     color: "#fff",
//     fontSize: 18,
//     fontWeight: "bold",
//   },
//   container: {
//     padding: 20,
//   },
//   taskBoxesContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     marginBottom: 20,
//   },
//   taskBox: {
//     width: (width - 60) / 2,
//     backgroundColor: "#fff",
//     padding: 15,
//     borderRadius: 10,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 5,
//     elevation: 3,
//   },
//   taskBox2: {
//     width: width - 40,
//     backgroundColor: "#fff",
//     padding: 15,
//     borderRadius: 10,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 5,
//     elevation: 3,
//     marginBottom: 20,
//   },
//   taskBoxTitle: {
//     fontSize: 18,
//     fontWeight: "bold",
//     marginTop: 10,
//   },
//   taskBoxContent: {
//     fontSize: 16,
//     color: "#888",
//     marginTop: 5,
//   },
//   icon: {
//     alignSelf: "center",
//   },
//   upcomingAuditsContainer: {
//     marginTop: 20,
//   },
//   upcomingAuditsText: {
//     fontSize: 20,
//     fontWeight: "bold",
//     marginBottom: 10,
//   },
//   auditItem: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     backgroundColor: "#fff",
//     padding: 15,
//     borderRadius: 10,
//     marginBottom: 10,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 5,
//     elevation: 3,
//   },
//   auditContent: {
//     flex: 1,
//   },
//   auditName: {
//     fontSize: 18,
//     fontWeight: "bold",
//   },
//   auditLocation: {
//     fontSize: 16,
//     color: "#888",
//   },
//   actionsContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//   },
//   acceptButton: {
//     backgroundColor: "#4caf50",
//     padding: 10,
//     borderRadius: 5,
//   },
//   buttonText: {
//     color: "#fff",
//     fontWeight: "bold",
//   },
//   topRightIconContainer: {
//     position: "absolute",
//     top: 40,
//     right: 15,
//     zIndex: 1,
//   },
// });

// export default HomeScreen;
















// import React, { useState, useEffect } from "react";
// import {
//   View,
//   Text,
//   StyleSheet,
//   ScrollView,
//   TouchableOpacity,
//   FlatList,
//   Image,
// } from "react-native";
// import { doc, getDoc, collection, getDocs } from "firebase/firestore";
// import AsyncStorage from "@react-native-async-storage/async-storage";
// import { db } from "./firebaseConfig";
// import { Ionicons } from "@expo/vector-icons";

// const HomeScreen = ({ navigation }) => {
//   const [ongoingCounter, setOngoingCounter] = useState(0);
//   const [upcomingAudits, setUpcomingAudits] = useState([]);
//   const [todaysTasks, setTodaysTasks] = useState([]);
//   const [userName, setUserName] = useState("");
//   const [hasAcceptedAllAudits, setHasAcceptedAllAudits] = useState(false);

//   useEffect(() => {
//     const fetchData = async () => {
//       try {
//         const userId = await AsyncStorage.getItem("userId"); // Get userId from AsyncStorage
//         if (userId) {
//           // Fetch Profile document for the logged-in user
//           const profileRef = doc(db, "Profile", userId);
//           const profileDoc = await getDoc(profileRef);

//           if (profileDoc.exists()) {
//             const ongoingCount = profileDoc.data()?.ongoingCounter || 0;
//             setOngoingCounter(ongoingCount);

//             const name = profileDoc.data()?.name || "User";
//             setUserName(name);

//             const today = new Date();
//             let todaysAuditCount = 0;

// acceptedAuditsSnapshot.forEach((doc) => {
//     const auditData = doc.data();
//     const auditDate = new Date(auditData.date); // Assuming 'date' is a timestamp
//     if (
//       auditDate.getFullYear() === today.getFullYear() &&
//       auditDate.getMonth() === today.getMonth() &&
//       auditDate.getDate() === today.getDate()
//     ) {
//       todaysAuditCount++;
//     }
//   });

// setTodaysTasks(todaysAuditCount);
//             const auditsRef = collection(db, "audits");
//             const auditsSnapshot = await getDocs(auditsRef);

//             let audits = [];
//             auditsSnapshot.forEach((auditDoc) => {
//               const auditData = auditDoc.data();
//               const acceptedByUser = auditData.acceptedByUser || [];
//               if (!acceptedByUser.includes(userId)) {
//                 audits.push({ id: auditDoc.id, ...auditData });
//               }
//             });

//             setUpcomingAudits(audits);

//             // If all audits are accepted, update the state
//             setHasAcceptedAllAudits(audits.length === 0);
//           }
//         }
//       } catch (error) {
//         console.error("Error fetching data:", error);
//       }
//     };

//     fetchData();
//   }, []);

//   return (
//     <View style={styles.container}>
//       <Text style={styles.header}>Welcome, {userName}!</Text>

//       <ScrollView>
//         <View style={styles.container}>
//           <Text style={{ fontSize: 18, fontWeight: "bold", color: "black" }}>
//             Categories
//           </Text>

//           <View style={styles.row}>
//             <TouchableOpacity
//               style={[styles.card, styles.completedTasks]}
//               onPress={() => navigation.navigate("TodaysTasks")}
//             >
//               <Ionicons
//                 name="calendar"
//                 size={30}
//                 color="#4A90E2"
//                 style={styles.icon}
//               />
//               <Text style={styles.cardTitle}>Today's Tasks</Text>
//               <Text style={styles.cardContent}>
//                 {todaysTasks.length > 0 ? todaysTasks : "0"}
//               </Text>
//             </TouchableOpacity>
//           </View>
//         </View>

//         <TouchableOpacity
//           style={[styles.card, styles.ongoingTasks]}
//           onPress={() => navigation.navigate("Ongoing")}
//         >
//           <Ionicons
//             name="play-circle"
//             size={30}
//             color="#FFC107"
//             style={styles.icon}
//           />
//           <Text style={styles.cardTitle}>Accepted Tasks</Text>
//           <Text style={styles.counter}>{ongoingCounter}</Text>
//         </TouchableOpacity>

//         <View style={styles.upcomingAuditsContainer}>
//           <Text style={styles.subHeader}>Upcoming Audits</Text>
//           {hasAcceptedAllAudits ? (
//             <View style={styles.noAuditsContainer}>
//               <Image
//                 source={require("./Images/nua.jpg")}
//                 style={styles.noAuditsImage}
//               />
//               <Text style={styles.noAuditsText}>
//                 You have accepted all upcoming audits
//               </Text>
//             </View>
//           ) : (
//             <FlatList
//               data={upcomingAudits}
//               renderItem={({ item }) => (
//                 <View style={styles.auditCard}>
//                   <View style={styles.auditDetails}>
//                     <Text style={styles.auditTitle}>{item.title}</Text>
//                     <Text style={styles.auditClient}>
//                       {item.clientId || "Unknown Client"}
//                     </Text>
//                     <View style={styles.auditLocationContainer}>
//                       <Ionicons
//                         name="location-outline"
//                         size={16}
//                         color="blue"
//                         style={styles.locationIcon}
//                       />
//                       <Text style={styles.auditLocation}>
//                         {item.city || "Unknown Location"}
//                       </Text>
//                     </View>
//                   </View>
//                   <TouchableOpacity
//                     style={styles.seeMoreButton}
//                     onPress={() =>
//                       navigation.navigate("AuditDetails", { audit: item })
//                     }
//                   >
//                     <Text style={styles.seeMoreButtonText}>See More Info</Text>
//                   </TouchableOpacity>
//                 </View>
//               )}
//               keyExtractor={(item) => item.id}
//             />
//           )}
//         </View>
//       </ScrollView>
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   container: {
//     flexGrow: 1,
//     padding: 16,
//     backgroundColor: "#F0F4F8",
//   },
//   noAuditsContainer: {
//     alignItems: "center",
//     marginTop: 20,
//   },
//   noAuditsImage: {
//     width: 100,
//     height: 100,
//     marginBottom: 10,
//   },
//   noAuditsText: {
//     fontSize: 16,
//     textAlign: "center",
//     color: "#666",
//   },
//   row: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     marginBottom: 16,
//     marginTop: 30,
//   },
//   greetingText: {
//     fontSize: 22,
//     fontWeight: "bold",
//     color: "#333",
//   },
//   ongoingTasks: {
//     backgroundColor: "#FFF4E5",
//   },
//   completedTasks: {
//     backgroundColor: "#E8F8E9",
//   },
//   header: {
//     fontSize: 24,
//     fontWeight: "bold",
//     marginBottom: 20,
//     color: "#333",
//   },
//   subHeader: {
//     fontSize: 20,
//     fontWeight: "bold",
//     marginBottom: 10,
//     color: "#333",
//     marginTop: 20,
//   },
//   counter: {
//     fontSize: 18,
//     marginBottom: 20,
//     color: "#777",
//   },
//   card: {
//     flex: 1,
//     backgroundColor: "#FFFFFF",
//     borderRadius: 12,
//     padding: 16,
//     marginHorizontal: 4,
//     alignItems: "center",
//     shadowColor: "#000",
//     shadowOpacity: 0.2,
//     shadowOffset: { width: 0, height: 2 },
//     shadowRadius: 4,
//     elevation: 3,
//   },
//   cardTitle: {
//     fontSize: 16,
//     textAlign: "center",
//     marginBottom: 8,
//     color: "#000",
//   },
//   cardContent: {
//     fontSize: 16,
//     color: "#000",
//     textAlign: "center",
//   },
//   icon: {
//     marginBottom: 8,
//   },
//   upcomingAuditsContainer: {
//     backgroundColor: "#FFFFFF",
//     borderRadius: 10,
//     padding: 15,
//     marginTop: 20,
//     marginHorizontal: 10,
//     shadowColor: "#000",
//     shadowOpacity: 0.1,
//     shadowOffset: { width: 0, height: 3 },
//     shadowRadius: 5,
//     elevation: 5,
//   },
//       seeMoreButton: {
//       backgroundColor: '#4A90E2',
//       paddingVertical: 6,
//       paddingHorizontal: 12,
//       borderRadius: 8,
//       alignItems: 'center',
//     },
//         seeMoreButtonText: {
//       color: '#fff',
//       fontSize: 14,
//     },
// });

// export default HomeScreen;
