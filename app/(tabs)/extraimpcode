
// import React, { useState, useEffect } from 'react';
// import { View, Text, TouchableOpacity, StyleSheet, ScrollView, FlatList, Dimensions } from "react-native";
// import { Ionicons } from "@expo/vector-icons";
// import { firebase } from './firebaseConfig';
// import AsyncStorage from '@react-native-async-storage/async-storage';
// import { getDocs, collection, updateDoc, doc, arrayUnion, onSnapshot, getDoc } from "firebase/firestore"; // Import onSnapshot

// import { db } from "./firebaseConfig";

// const { width, height } = Dimensions.get("window");

// const HomeScreen = ({ navigation, route }) => {
//   const [userId, setUserId] = useState(null);
//   const userEmail = route?.params?.userEmail || "";
//   const [greeting, setGreeting] = useState("");
//   const [userName, setUserName] = useState("");
//   const [audits, setAudits] = useState([]);
//   const [ongoingAudits, setOngoingAudits] = useState([]);
//   const [todayTasks, setTodayTasks] = useState([]);
//   const [completedTasks, setCompletedTasks] = useState([]);
//   const [clientsData, setClientsData] = useState({});
//   const [branchesData, setBranchesData] = useState([]);
//   const [selectedStatus, setSelectedStatus] = useState("");
//   const [searchTerm, setSearchTerm] = useState("");
//   const [filterLocation, setFilterLocation] = useState("");

//   useEffect(() => {
//     let unsubscribe; // Declare unsubscribe here

//     const loadData = async () => {
//       try {
//         // Fetch audits from Firebase collection 'audits'
//         const auditRef = collection(db, "audits");

//         // Real-time listener for updates on audits
//         unsubscribe = onSnapshot(auditRef, (snapshot) => { // Initialize unsubscribe here
//           const auditData = snapshot.docs.map((doc) => ({
//             id: doc.id,
//             ...doc.data(),
//           }));
//           setAudits(auditData); // Update audits with real-time data
//         });

//         // Fetch ongoing audits from AsyncStorage
//         const ongoingAuditsData = await AsyncStorage.getItem("ongoingAudits");
//         if (ongoingAuditsData) {
//           setOngoingAudits(JSON.parse(ongoingAuditsData));
//         }

//         // Fetch clients from 'clients' collection
//         const clientsRef = collection(db, "clients");
//         const clientSnapshot = await getDocs(clientsRef);
//         const clients = {};
//         clientSnapshot.docs.forEach((doc) => {
//           clients[doc.id] = doc.data().name;
//         });
//         setClientsData(clients);

//         // Fetch branches from 'branches' collection
//         const branchesRef = collection(db, "branches");
//         const branchSnapshot = await getDocs(branchesRef);
//         const branches = branchSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setBranchesData(branches);

//         // Fetch tasks from 'tasks' collection
//         const tasksRef = collection(db, "tasks");
//         const taskSnapshot = await getDocs(tasksRef);
//         const taskData = taskSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setTodayTasks(taskData.filter(task => task.status === 'today'));
//         setCompletedTasks(taskData.filter(task => task.status === 'completed'));

//         // Fetch the logged-in user's ID
//         const userDoc = await firebase.firestore().collection('Profile').where("email", "==", userEmail).get();
//         if (!userDoc.empty) {
//           const userId = userDoc.docs[0].id;
//           setUserId(userId); // Set the logged-in user's document ID
//         }

//       } catch (error) {
//         console.error("Error fetching data:", error);
//       }

//       // Set greeting based on time
//       const currentTime = new Date().getHours();
//       setGreeting(currentTime < 12 ? "Good Morning" : currentTime < 19 ? "Good Afternoon " : "Good Evening");
//       setUserName(userEmail ? userEmail.split("@")[0] : "User");
//     };

//     loadData();

//     // Clean up the listener when the component unmounts
//     return () => {
//       if (unsubscribe) {
//         unsubscribe(); // Call unsubscribe to stop listening to updates
//       }
//     };

//   }, [userEmail]);

//   const getAvatar = (Client) => {
//     const firstLetter = Client ? Client.charAt(0).toUpperCase() : "â’¶";
//     return firstLetter;
//   };

//   const acceptAudit = async (auditId) => {
//     try {
//       const auditRef = doc(db, "audits", auditId);

//       // Update the audit to mark it as accepted and save userId in AcceptedBy
//       await updateDoc(auditRef, {
//         auditorId: userId,
//         isAccepted: true,
//         AcceptedBy: userId, // Save the user ID in the AcceptedBy field
//       });

//       // Fetch the audit document to get the userId from the AcceptedBy field
//       const auditSnapshot = await getDoc(auditRef);
//       const auditData = auditSnapshot.data();

//       if (auditData && auditData.AcceptedBy) {
//         const userRef = doc(db, "Profile", auditData.AcceptedBy);

//         // Add the auditId to the user's AcceptedAudits array in the Profile collection
//         await updateDoc(userRef, {
//           AcceptedAudits: arrayUnion(auditId),  // Ensure no duplicates
//         });

//         console.log("Audit accepted and added to the user's AcceptedAudits!");
//       } else {
//         console.log("No AcceptedBy field found in the audit document.");
//       }

//     } catch (error) {
//       console.error("Error accepting audit:", error);
//     }
//   };

//   const completeAudit = async (auditId) => {
//     try {
//       const auditRef = doc(db, "audits", auditId);
//       const auditSnapshot = await getDoc(auditRef);
//       const auditData = auditSnapshot.data();

//       if (auditData.isAccepted) {
//         await updateDoc(auditRef, {
//           isCompleted: true,
//         });

//         console.log("Audit marked as complete!");
//       } else {
//         console.log("Audit is not accepted, cannot mark as complete.");
//       }
//     } catch (error) {
//       console.error("Error completing audit:", error);
//     }
//   };

//   const filteredAudits = audits.filter((audit) => {
//     if (selectedStatus && audit.status !== selectedStatus) {
//       return false;
//     }
//     if (filterLocation && audit.location !== filterLocation) {
//       return false;
//     }
//     if (searchTerm && !audit.name.toLowerCase().includes(searchTerm.toLowerCase())) {
//       return false;
//     }
//     return true;
//   });

//   return (
//     <View style={styles.fullScreen}>
//       <ScrollView contentContainerStyle={{ flexGrow: 1 }}>
//         <View>
//           {userId ? (
//             <Text>Welcome, User ID: {userId}</Text>
//           ) : (
//             <Text>.</Text>
//           )}
//         </View>
  
//         <View style={styles.greetingContainer}>
//           <Text style={styles.greetingText}>{greeting}, {userName}</Text>
//         </View>
  
//         <View style={styles.container}>
//           <View style={styles.taskBoxesContainer}>
//             <TouchableOpacity style={styles.taskBox}>
//               <TouchableOpacity onPress={() => navigation.navigate("UserInfo")}>
//                 <Ionicons name="calendar" size={30} color="black" style={styles.icon} />
//                 <Text style={styles.taskBoxTitle}>Today's Tasks</Text>
//                 <Text style={styles.taskBoxContent}>{todayTasks.length} Tasks</Text>
//               </TouchableOpacity>
//             </TouchableOpacity>
  
//             <TouchableOpacity style={styles.taskBox}>
//               <TouchableOpacity onPress={() => navigation.navigate("Ongoing")}>
//                 <Ionicons name="play-circle" size={30} color="black" style={styles.icon} />
//                 <Text style={styles.taskBoxTitle}>Ongoing Tasks</Text>
//                 <Text style={styles.taskBoxContent}>{ongoingAudits.length} Tasks</Text>
//               </TouchableOpacity>
//             </TouchableOpacity>
//           </View>
  
//           <TouchableOpacity style={styles.taskBox2}>
//             <TouchableOpacity onPress={() => navigation.navigate("Completed-Tasks")}>
//               <Ionicons name="checkmark-circle" size={30} color="black" style={styles.icon} />
//               <Text style={styles.taskBoxTitle}>Completed Tasks</Text>
//               <Text style={styles.taskBoxContent}>{completedTasks.length} Tasks</Text>
//             </TouchableOpacity>
//           </TouchableOpacity>
  
//           <View style={styles.upcomingAuditsContainer}>
//             <Text style={styles.upcomingAuditsText}>Upcoming Audits</Text>
  
//             <FlatList
//               data={filteredAudits}
//               renderItem={({ item }) => {
//                 const clientName = clientsData[item.clientId] || "Unknown Client";
//                 const branch = branchesData.find((branch) => branch.id === item.branchId);
//                 const branchName = branch ? branch.name : "Unknown Branch";

//                 return (
//                   <TouchableOpacity
//                     style={styles.auditItem}
//                     onPress={() => navigation.navigate("AuditDetails", { auditId: item.id })} // Fixed screen name here
//                   >
//                     <View style={styles.clientImageContainer}>
//                       <Text style={styles.clientImage}>{getAvatar(clientName)}</Text>
//                     </View>
//                     <View style={styles.auditDetails}>
//                       <Text style={styles.auditTitle}>{clientName}</Text>
//                       <Text style={styles.auditText}>Branch: {branchName}</Text>
//                       <Text style={styles.auditText}>Location: {item.location}</Text>
//                       <Text style={styles.auditText}>Date: {item.date}</Text>
//                     </View>
//                     <TouchableOpacity
//                       style={styles.acceptButton}
//                       onPress={() => acceptAudit(item.id)}
//                     >
//                       <Text style={styles.acceptButtonText}>Accept</Text>
//                     </TouchableOpacity>
//                   </TouchableOpacity>
//                 );
//               }}
//               keyExtractor={(item) => item.id}
//             />
//           </View>
//         </View>
//       </ScrollView>
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   fullScreen: {
//     flex: 1,
//   },
//   greetingContainer: {
//     paddingTop: 30,
//     paddingHorizontal: 20,
//   },
//   greetingText: {
//     fontSize: 30,
//     fontWeight: "bold",
//   },
//   container: {
//     paddingTop: 30,
//   },
//   taskBoxesContainer: {
//     flexDirection: "row",
//     justifyContent: "space-around",
//   },
//   taskBox: {
//     width: width * 0.4,
//     height: 120,
//     backgroundColor: "#F3F4F6",
//     justifyContent: "center",
//     alignItems: "center",
//     borderRadius: 15,
//     margin: 10,
//   },
//   taskBox2: {
//     width: width * 0.9,
//     height: 120,
//     backgroundColor: "#F3F4F6",
//     justifyContent: "center",
//     alignItems: "center",
//     borderRadius: 15,
//     margin: 10,
//   },
//   taskBoxTitle: {
//     fontSize: 18,
//     fontWeight: "bold",
//   },
//   taskBoxContent: {
//     fontSize: 14,
//     marginTop: 5,
//   },
//   upcomingAuditsContainer: {
//     marginTop: 20,
//     paddingHorizontal: 20,
//   },
//   upcomingAuditsText: {
//     fontSize: 22,
//     fontWeight: "bold",
//   },
//   auditItem: {
//     flexDirection: "row",
//     backgroundColor: "#FFF",
//     marginBottom: 15,
//     padding: 10,
//     borderRadius: 8,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.5,
//     elevation: 5,
//   },
//   clientImageContainer: {
//     justifyContent: "center",
//     alignItems: "center",
//     width: 50,
//     height: 50,
//     backgroundColor: "#D1D5DB",
//     borderRadius: 25,
//     marginRight: 10,
//   },
//   clientImage: {
//     fontSize: 24,
//     fontWeight: "bold",
//     color: "#FFF",
//   },
//   auditDetails: {
//     flex: 1,
//     justifyContent: "center",
//   },
//   auditTitle: {
//     fontSize: 18,
//     fontWeight: "bold",
//   },
//   auditText: {
//     fontSize: 14,
//   },
//   acceptButton: {
//     justifyContent: "center",
//     alignItems: "center",
//     backgroundColor: "#4CAF50",
//     paddingVertical: 5,
//     paddingHorizontal: 15,
//     borderRadius: 5,
//   },
//   acceptButtonText: {
//     color: "#FFF",
//     fontWeight: "bold",
//   },
// });

// export default HomeScreen;









































// import React, { useState, useEffect } from "react";
// import { View, Text, TouchableOpacity, StyleSheet, ScrollView, FlatList, Dimensions } from "react-native";
// import { Ionicons } from "@expo/vector-icons";
// import { firebase } from "./firebaseConfig";
// import AsyncStorage from "@react-native-async-storage/async-storage";
// import { getDocs, collection, doc, updateDoc, arrayUnion } from "firebase/firestore";
// import { db } from "./firebaseConfig";

// const { width } = Dimensions.get("window");

// const HomeScreen = ({ navigation, route }) => {
//   const userEmail = route?.params?.userEmail || "";
//   const [greeting, setGreeting] = useState("");
//   const [userName, setUserName] = useState("");
//   const [audits, setAudits] = useState([]);
//   const [ongoingAudits, setOngoingAudits] = useState([]);
//   const [todayTasks, setTodayTasks] = useState([]);
//   const [completedTasks, setCompletedTasks] = useState([]);
//   const [clientsData, setClientsData] = useState({});
//   const [branchesData, setBranchesData] = useState([]);

//   useEffect(() => {
//     const loadData = async () => {
//       try {
//         // Fetch audits from Firebase collection 'audits'
//         const auditRef = collection(db, "audits");
//         const snapshot = await getDocs(auditRef);
//         const auditData = snapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setAudits(auditData);

//         // Fetch ongoing audits from AsyncStorage
//         const ongoingAuditsData = await AsyncStorage.getItem("ongoingAudits");
//         if (ongoingAuditsData) {
//           setOngoingAudits(JSON.parse(ongoingAuditsData));
//         }

//         // Fetch clients from 'clients' collection
//         const clientsRef = collection(db, "clients");
//         const clientSnapshot = await getDocs(clientsRef);
//         const clients = {};
//         clientSnapshot.docs.forEach((doc) => {
//           clients[doc.id] = doc.data().name;
//         });
//         setClientsData(clients);

//         // Fetch branches from 'branches' collection
//         const branchesRef = collection(db, "branches");
//         const branchSnapshot = await getDocs(branchesRef);
//         const branches = branchSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setBranchesData(branches);

//         // Fetch tasks from 'tasks' collection
//         const tasksRef = collection(db, "tasks");
//         const taskSnapshot = await getDocs(tasksRef);
//         const taskData = taskSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setTodayTasks(taskData.filter((task) => task.status === "today"));
//         setCompletedTasks(taskData.filter((task) => task.status === "completed"));
//       } catch (error) {
//         console.error("Error fetching data:", error);
//       }

//       // Set greeting based on time
//       const currentTime = new Date().getHours();
//       setGreeting(currentTime < 12 ? "Good Morning" : currentTime < 19 ? "Good Afternoon " : "Good Evening");
//       setUserName(userEmail ? userEmail.split("@")[0] : "User");
//     };

//     loadData();
//   }, [userEmail]);

//   const getAvatar = (Client) => {
//     const firstLetter = Client ? Client.charAt(0).toUpperCase() : "â’¶";
//     return firstLetter;
//   };

//   const acceptAudit = async (auditId) => {
//     try {
//       // Retrieve userId from AsyncStorage or any other source
//       const userId = await AsyncStorage.getItem("userId");

//       if (!userId) {
//         console.error("User ID not found");
//         return;
//       }

//       // Update the auditorId in the audits collection
//       const auditRef = doc(db, "audits", auditId);
//       await updateDoc(auditRef, {
//         auditorId: userId,
//         isAccepted: true,
//       });

//       // Update the AcceptedAudits field in the user's Profile document
//       const userRef = doc(db, "Profile", userId);
//       await updateDoc(userRef, {
//         AcceptedAudits: arrayUnion(auditId),
//       });

//       // Update local state
//       setAudits((prevAudits) =>
//         prevAudits.map((audit) =>
//           audit.id === auditId ? { ...audit, auditorId: userId, isAccepted: true } : audit
//         )
//       );

//       console.log("Audit accepted successfully");
//     } catch (error) {
//       console.error("Error accepting audit:", error);
//     }
//   };

//   return (
//     <View style={styles.fullScreen}>
//       <ScrollView contentContainerStyle={{ flexGrow: 1 }}>
//         <View style={styles.greetingContainer}>
//           <Text style={styles.greetingText}>{greeting}, {userName}</Text>
//         </View>

//         <View style={styles.container}>
//           {/* Task Boxes Section */}
//           <View style={styles.taskBoxesContainer}>
//             <TouchableOpacity style={styles.taskBox} onPress={() => navigation.navigate("UserInfo")}>
//               <Ionicons name="calendar" size={30} color="black" style={styles.icon} />
//               <Text style={styles.taskBoxTitle}>Today's Tasks</Text>
//               <Text style={styles.taskBoxContent}>{todayTasks.length} Tasks</Text>
//             </TouchableOpacity>

//             <TouchableOpacity style={styles.taskBox} onPress={() => navigation.navigate("Ongoing")}>
//               <Ionicons name="play-circle" size={30} color="black" style={styles.icon} />
//               <Text style={styles.taskBoxTitle}>Ongoing Tasks</Text>
//               <Text style={styles.taskBoxContent}>{ongoingAudits.length} Tasks</Text>
//             </TouchableOpacity>
//           </View>

//           <TouchableOpacity style={styles.taskBox2} onPress={() => navigation.navigate("Completed-Tasks")}>
//             <Ionicons name="checkmark-circle" size={30} color="black" style={styles.icon} />
//             <Text style={styles.taskBoxTitle}>Completed Tasks</Text>
//             <Text style={styles.taskBoxContent}>{completedTasks.length} Tasks</Text>
//           </TouchableOpacity>

//           {/* Upcoming Audits Section */}
//           <View style={styles.upcomingAuditsContainer}>
//             <Text style={styles.upcomingAuditsText}>Upcoming Audits</Text>

//             <FlatList
//               data={audits}
//               renderItem={({ item }) => {
//                 const clientName = clientsData[item.clientId] || "Unknown Client";
//                 const branch = branchesData.find((branch) => branch.id === item.branchId);
//                 const branchCity = branch ? branch.city : "Unknown Location";

//                 return (
//                   <View style={styles.auditItem}>
//                     <View style={styles.clientImageContainer}>
//                       <Text style={styles.clientImage}>{getAvatar(item.auditorId)}</Text>
//                     </View>
//                     <View style={styles.auditContent}>
//                       <Text style={styles.auditName}>{item.name}</Text>
//                       <Text style={styles.auditDate}>{item.date}</Text>
//                       <Text style={styles.auditBranchId}>Branch: {branch?.name || "Unknown Branch"}</Text>
//                       <Text style={styles.auditClientId}>Client: {clientName}</Text>
//                       <Text style={styles.auditCity}>Location: {branchCity}</Text>
//                       <Text style={styles.auditAuditorId}>Auditor: {item.auditorId}</Text>

//                       {!item.isAccepted && (
//                         <TouchableOpacity
//                           style={styles.acceptButton}
//                           onPress={() => acceptAudit(item.id)}
//                         >
//                           <Text style={styles.acceptButtonText}>Accept</Text>
//                         </TouchableOpacity>
//                       )}
//                     </View>
//                   </View>
//                 );
//               }}
//               keyExtractor={(item) => item.id}
//             />
//           </View>
//         </View>
//       </ScrollView>
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   fullScreen: {
//     flex: 1,
//     backgroundColor: "white",
//   },
//   greetingContainer: {
//     marginTop: 50,
//     paddingHorizontal: 20,
//   },
//   greetingText: {
//     fontSize: 24,
//     fontWeight: "bold",
//   },
//   container: {
//     padding: 20,
//   },
//   taskBoxesContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//   },
//   taskBox: {
//     width: (width - 60) / 2,
//     height: 120,
//     backgroundColor: "#f0f0f0",
//     borderRadius: 10,
//     padding: 15,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 20,
//     borderWidth: 1,
//     borderColor: "gray",
//   },
//   taskBox2: {
//     width: width - 40,
//     height: 120,
//     backgroundColor: "#f0f0f0",
//     borderRadius: 10,
//     padding: 15,
//     alignItems: "center",
//     justifyContent: "center",
//     marginBottom: 20,
//     borderWidth: 1,
//     borderColor: "gray",
//   },
//   taskBoxTitle: {
//     fontSize: 18,
//     fontWeight: "bold",
//   },
//   taskBoxContent: {
//     fontSize: 16,
//   },
//   upcomingAuditsContainer: {
//     marginTop: 20,
//   },
//   upcomingAuditsText: {
//     fontSize: 20,
//     fontWeight: "bold",
//     marginBottom: 10,
//   },
//   auditItem: {
//     flexDirection: "row",
//     padding: 10,
//     marginBottom: 10,
//     borderRadius: 5,
//     backgroundColor: "#f9f9f9",
//     borderWidth: 1,
//     borderColor: "#ddd",
//   },
//   clientImageContainer: {
//     width: 50,
//     height: 50,
//     backgroundColor: "#ccc",
//     borderRadius: 25,
//     justifyContent: "center",
//     alignItems: "center",
//     marginRight: 10,
//   },
//   clientImage: {
//     fontSize: 20,
//     fontWeight: "bold",
//     color: "#fff",
//   },
//   auditContent: {
//     flex: 1,
//   },
//   auditName: {
//     fontSize: 16,
//     fontWeight: "bold",
//   },
//   auditDate: {
//     fontSize: 14,
//     color: "gray",
//   },
//   auditBranchId: {
//     fontSize: 14,
//     color: "gray",
//   },
//   auditClientId: {
//     fontSize: 14,
//     color: "gray",
//   },
//   auditCity: {
//     fontSize: 14,
//     color: "gray",
//   },
//   auditAuditorId: {
//     fontSize: 14,
//     color: "gray",
//   },
//   acceptButton: {
//     marginTop: 10,
//     padding: 10,
//     backgroundColor: "#4CAF50",
//     borderRadius: 5,
//     alignItems: "center",
//   },
//   acceptButtonText: {
//     color: "#fff",
//     fontWeight: "bold",
//   },
// });

// export default HomeScreen;

















// // ##############################       Running code #############################################

// import React, { useState, useEffect } from 'react'; 
// import { View, Text, TouchableOpacity, StyleSheet, ScrollView, FlatList, Dimensions } from "react-native";
// import { Ionicons } from "@expo/vector-icons";
// import { firebase } from './firebaseConfig';
// import AsyncStorage from '@react-native-async-storage/async-storage';
// import { getDocs, collection, updateDoc, doc, arrayUnion, onSnapshot, getDoc } from "firebase/firestore"; // Import onSnapshot

// import { db } from "./firebaseConfig";

// const { width, height } = Dimensions.get("window");

// const HomeScreen = ({ navigation, route }) => {
//   const [userId, setUserId] = useState(null);
//   const userEmail = route?.params?.userEmail || "";
//   const [greeting, setGreeting] = useState("");
//   const [userName, setUserName] = useState("");
//   const [audits, setAudits] = useState([]);
//   const [ongoingAudits, setOngoingAudits] = useState([]);
//   const [todayTasks, setTodayTasks] = useState([]);
//   const [completedTasks, setCompletedTasks] = useState([]);
//   const [clientsData, setClientsData] = useState({});
//   const [branchesData, setBranchesData] = useState([]);
//   const [selectedStatus, setSelectedStatus] = useState("");
//   const [searchTerm, setSearchTerm] = useState("");
//   const [filterLocation, setFilterLocation] = useState("");

//   useEffect(() => {
//     const loadData = async () => {
//       try {
//         // Fetch audits from Firebase collection 'audits'
//         const auditRef = collection(db, "audits");

//         // Real-time listener for updates on audits
//         const unsubscribe = onSnapshot(auditRef, (snapshot) => {
//           const auditData = snapshot.docs.map((doc) => ({
//             id: doc.id,
//             ...doc.data(),
//           }));
//           setAudits(auditData); // Update audits with real-time data
//         });

//         // Fetch ongoing audits from AsyncStorage
//         const ongoingAuditsData = await AsyncStorage.getItem("ongoingAudits");
//         if (ongoingAuditsData) {
//           setOngoingAudits(JSON.parse(ongoingAuditsData));
//         }

//         // Fetch clients from 'clients' collection
//         const clientsRef = collection(db, "clients");
//         const clientSnapshot = await getDocs(clientsRef);
//         const clients = {};
//         clientSnapshot.docs.forEach((doc) => {
//           clients[doc.id] = doc.data().name;
//         });
//         setClientsData(clients);

//         // Fetch branches from 'branches' collection
//         const branchesRef = collection(db, "branches");
//         const branchSnapshot = await getDocs(branchesRef);
//         const branches = branchSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setBranchesData(branches);

//         // Fetch tasks from 'tasks' collection
//         const tasksRef = collection(db, "tasks");
//         const taskSnapshot = await getDocs(tasksRef);
//         const taskData = taskSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setTodayTasks(taskData.filter(task => task.status === 'today'));
//         setCompletedTasks(taskData.filter(task => task.status === 'completed'));

//         // Fetch the logged-in user's ID
//         const userDoc = await firebase.firestore().collection('Profile').where("email", "==", userEmail).get();
//         if (!userDoc.empty) {
//           const userId = userDoc.docs[0].id;
//           setUserId(userId); // Set the logged-in user's document ID
//         }

//       } catch (error) {
//         console.error("Error fetching data:", error);
//       }

//       // Set greeting based on time
//       const currentTime = new Date().getHours();
//       setGreeting(currentTime < 12 ? "Good Morning" : currentTime < 19 ? "Good Afternoon " : "Good Evening");
//       setUserName(userEmail ? userEmail.split("@")[0] : "User");
//     };

//     loadData();

//     // Clean up the listener when the component unmounts
//     return () => {
//       if (typeof unsubscribe === "function") {
//         unsubscribe(); // Make sure unsubscribe is a function before calling it
//       }
//     };

//   }, [userEmail]);
//   const getAvatar = (Client) => {
//     // Check if 'Client' is a valid string
//     const firstLetter = Client && typeof Client === 'string' ? Client.charAt(0).toUpperCase() : "â’¶";
//     return firstLetter;
//   };
  
//   const acceptAudit = async (auditId) => {
//     try {
//       const auditRef = doc(db, "audits", auditId);
//       await updateDoc(auditRef, {
//         auditorId: userId,
//         isAccepted: true,
//       });

//       if (userId) {
//         const userRef = doc(db, "Profile", userId);
//         await updateDoc(userRef, {
//           AcceptedAudits: arrayUnion(auditId),
//         });

//         console.log("Audit accepted successfully!");
//       } else {
//         console.log("User ID is not available.");
//       }
//     } catch (error) {
//       console.error("Error accepting audit:", error);
//     }
//   };

//   const completeAudit = async (auditId) => {
//     try {
//       const auditRef = doc(db, "audits", auditId);
//       const auditSnapshot = await getDoc(auditRef);
//       const auditData = auditSnapshot.data();

//       if (auditData.isAccepted) {
//         await updateDoc(auditRef, {
//           isCompleted: true,
//         });

//         console.log("Audit marked as complete!");
//       } else {
//         console.log("Audit is not accepted, cannot mark as complete.");
//       }
//     } catch (error) {
//       console.error("Error completing audit:", error);
//     }
//   };

//   const filteredAudits = audits.filter((audit) => {
//     if (selectedStatus && audit.status !== selectedStatus) {
//       return false;
//     }
//     if (filterLocation && audit.location !== filterLocation) {
//       return false;
//     }
//     if (searchTerm && !audit.name.toLowerCase().includes(searchTerm.toLowerCase())) {
//       return false;
//     }
//     return true;
//   });

//   return (
//     <View style={styles.fullScreen}>
//       <ScrollView contentContainerStyle={{ flexGrow: 1 }}>
//         <View>
//           {userId ? (
//             <Text>Welcome, User ID: {userId}</Text>
//           ) : (
//             <Text>.</Text>
//           )}
//         </View>
  
//         <View style={styles.greetingContainer}>
//           <Text style={styles.greetingText}>{greeting}, {userName}</Text>
//         </View>
  
//         <View style={styles.container}>
//           <View style={styles.taskBoxesContainer}>
//             <TouchableOpacity style={styles.taskBox}>
//               <TouchableOpacity onPress={() => navigation.navigate("UserInfo")}>
//                 <Ionicons name="calendar" size={30} color="black" style={styles.icon} />
//                 <Text style={styles.taskBoxTitle}>Today's Tasks</Text>
//                 <Text style={styles.taskBoxContent}>{todayTasks.length} Tasks</Text>
//               </TouchableOpacity>
//             </TouchableOpacity>
  
//             <TouchableOpacity style={styles.taskBox}>
//               <TouchableOpacity onPress={() => navigation.navigate("Ongoing")}>
//                 <Ionicons name="play-circle" size={30} color="black" style={styles.icon} />
//                 <Text style={styles.taskBoxTitle}>Ongoing Tasks</Text>
//                 <Text style={styles.taskBoxContent}>{ongoingAudits.length} Tasks</Text>
//               </TouchableOpacity>
//             </TouchableOpacity>
//           </View>
  
//           <TouchableOpacity style={styles.taskBox2}>
//             <TouchableOpacity onPress={() => navigation.navigate("Completed-Tasks")}>
//               <Ionicons name="checkmark-circle" size={30} color="black" style={styles.icon} />
//               <Text style={styles.taskBoxTitle}>Completed Tasks</Text>
//               <Text style={styles.taskBoxContent}>{completedTasks.length} Tasks</Text>
//             </TouchableOpacity>
//           </TouchableOpacity>
  
//           <View style={styles.upcomingAuditsContainer}>
//             <Text style={styles.upcomingAuditsText}>Upcoming Audits</Text>
  
//             <FlatList
//               data={filteredAudits}
//               renderItem={({ item }) => {
//                 const clientName = clientsData[item.clientId] || "Unknown Client";
//                 const branch = branchesData.find((branch) => branch.id === item.branchId);
//                 const branchCity = branch ? branch.city : "Unknown Location";
  
//                 return (
//                   <TouchableOpacity
//                     style={styles.auditItem}
//                     onPress={() => navigation.navigate("AuditDetails", { audit: item })}
//                   >
//                     <View style={styles.clientImageContainer}>
//                       <Text style={styles.clientImage}>{getAvatar(item.auditorId)}</Text>
//                     </View>
//                     <View style={styles.auditContent}>
//                       <Text style={styles.auditTitle}>{item.name}</Text>
//                       <Text style={styles.auditDetails}>Location: {branchCity}</Text>
//                       <Text style={styles.auditDetails}>Client: {clientName}</Text>
//                       <Text style={styles.auditDetails}>Date: {item.date}</Text>
  
//                       {item.isAccepted ? (
//                         <Text style={styles.acceptedText}>Accepted</Text>
//                       ) : (
//                         <TouchableOpacity
//                           style={styles.acceptButton}
//                           onPress={() => acceptAudit(item.id)}
//                         >
//                           <Text style={styles.acceptButtonText}>Accept Audit</Text>
//                         </TouchableOpacity>
//                       )}
//                     </View>
//                   </TouchableOpacity>
//                 );
//               }}
//               keyExtractor={(item) => item.id}
//             />
//           </View>
//         </View>
//       </ScrollView>
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//     fullScreen: {
//       flex: 1,
//       backgroundColor: "#f5f5f5",
//     },
//     greetingContainer: {
//       padding: 15,
//       backgroundColor: "#6200ea",
//     },
//     greetingText: {
//       color: "#fff",
//       fontSize: 18,
//       fontWeight: "bold",
//     },
//     container: {
//       padding: 20,
//     },
//       acceptButtonText: {
//           color: "#fff",
//           fontWeight: "bold",
//         },
//     taskBoxesContainer: {
//       flexDirection: "row",
//       justifyContent: "space-between",
//       marginBottom: 20,
//     },
//     taskBox: {
//       width: (width - 60) / 2,
//       backgroundColor: "#fff",
//       padding: 15,
//       borderRadius: 10,
//       elevation: 3,
//       alignItems: "center",
//       justifyContent: "center",
//     },
//     taskBoxTitle: {
//       fontSize: 16,
//       fontWeight: "bold",
//       marginTop: 10,
//     },
//     taskBoxContent: {
//       fontSize: 14,
//       marginTop: 5,
//     },
//     taskBox2: {
//       backgroundColor: "#fff",
//       padding: 15,
//       borderRadius: 10,
//       elevation: 3,
//       marginBottom: 20,
//     },
//     upcomingAuditsContainer: {
//       backgroundColor: "#fff",
//       padding: 20,
//       borderRadius: 10,
//       elevation: 3,
//     },
//     upcomingAuditsText: {
//       fontSize: 18,
//       fontWeight: "bold",
//       marginBottom: 15,
//     },
//     auditItem: {
//       flexDirection: "row",
//       justifyContent: "space-between",
//       padding: 10,
//       borderBottomWidth: 1,
//       borderColor: "#ddd",
//     },
//     clientImageContainer: {
//       width: 50,
//       height: 50,
//       borderRadius: 50,
//       backgroundColor: "#6200ea",
//       justifyContent: "center",
//       alignItems: "center",
//     },
//     clientImage: {
//       color: "#fff",
//       fontSize: 22,
//       fontWeight: "bold",
//     },
//     auditContent: {
//       flex: 1,
//       paddingLeft: 10,
//     },
//     auditName: {
//       fontSize: 16,
//       fontWeight: "bold",
//     },
//     auditLocation: {
//       fontSize: 14,
//       color: "#888",
//     },
//     actionsContainer: {
//       justifyContent: "center",
//       alignItems: "center",
//     },
//     acceptButton: {
//       backgroundColor: "#4caf50",
//       padding: 10,
//       borderRadius: 5,
//     },
//     completeButton: {
//       backgroundColor: "#4caf50",
//       padding: 10,
//       borderRadius: 5,
//     },
//     buttonText: {
//       color: "#fff",
//       fontSize: 14,
//       fontWeight: "bold",
//     },
//   });
  
//   export default HomeScreen;
  
  
  
  
  






  
  
// import React, { useState, useEffect } from 'react'; 
// import { View, Text, TouchableOpacity, StyleSheet, ScrollView, FlatList, Dimensions } from "react-native";
// import { Ionicons } from "@expo/vector-icons";
// import { firebase } from './firebaseConfig';
// import AsyncStorage from '@react-native-async-storage/async-storage';
// import { getDocs, collection, updateDoc, doc, arrayUnion, onSnapshot, getDoc } from "firebase/firestore"; // Import onSnapshot

// import { db } from "./firebaseConfig";

// const { width, height } = Dimensions.get("window");

// const HomeScreen = ({ navigation, route }) => {
//   const [userId, setUserId] = useState(null);
//   const userEmail = route?.params?.userEmail || "";
//   const [greeting, setGreeting] = useState("");
//   const [userName, setUserName] = useState("");
//   const [audits, setAudits] = useState([]);
//   const [ongoingAudits, setOngoingAudits] = useState([]);
//   const [todayTasks, setTodayTasks] = useState([]);
//   const [completedTasks, setCompletedTasks] = useState([]);
//   const [clientsData, setClientsData] = useState({});
//   const [branchesData, setBranchesData] = useState([]);
//   const [selectedStatus, setSelectedStatus] = useState("");
//   const [searchTerm, setSearchTerm] = useState("");
//   const [filterLocation, setFilterLocation] = useState("");

//   useEffect(() => {
//     const loadData = async () => {
//       try {
//         // Fetch audits from Firebase collection 'audits'
//         const auditRef = collection(db, "audits");
        
//         // Real-time listener for updates on audits
//         const unsubscribe = onSnapshot(auditRef, (snapshot) => {
//           const auditData = snapshot.docs.map((doc) => ({
//             id: doc.id,
//             ...doc.data(),
//           }));
//           setAudits(auditData); // Update audits with real-time data
//         });

//         // Fetch ongoing audits from AsyncStorage
//         const ongoingAuditsData = await AsyncStorage.getItem("ongoingAudits");
//         if (ongoingAuditsData) {
//           setOngoingAudits(JSON.parse(ongoingAuditsData));
//         }

//         // Fetch clients from 'clients' collection
//         const clientsRef = collection(db, "clients");
//         const clientSnapshot = await getDocs(clientsRef);
//         const clients = {};
//         clientSnapshot.docs.forEach((doc) => {
//           clients[doc.id] = doc.data().name;
//         });
//         setClientsData(clients);

//         // Fetch branches from 'branches' collection
//         const branchesRef = collection(db, "branches");
//         const branchSnapshot = await getDocs(branchesRef);
//         const branches = branchSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setBranchesData(branches);

//         // Fetch tasks from 'tasks' collection
//         const tasksRef = collection(db, "tasks");
//         const taskSnapshot = await getDocs(tasksRef);
//         const taskData = taskSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setTodayTasks(taskData.filter(task => task.status === 'today'));
//         setCompletedTasks(taskData.filter(task => task.status === 'completed'));

//         // Fetch the logged-in user's ID
//         const userDoc = await firebase.firestore().collection('Profile').where("email", "==", userEmail).get();
//         if (!userDoc.empty) {
//           const userId = userDoc.docs[0].id;
//           setUserId(userId); // Set the logged-in user's document ID
//         }

//       } catch (error) {
//         console.error("Error fetching data:", error);
//       }

//       // Set greeting based on time
//       const currentTime = new Date().getHours();
//       setGreeting(currentTime < 12 ? "Good Morning" : currentTime < 19 ? "Good Afternoon " : "Good Evening");
//       setUserName(userEmail ? userEmail.split("@")[0] : "User");
//     };

//     loadData();

//     // Clean up the listener when the component unmounts
//     return () => {
//       if (unsubscribe) {
//         unsubscribe();
//       }
//     };

//   }, [userEmail]);

//   const getAvatar = (Client) => {
//     const firstLetter = Client ? Client.charAt(0).toUpperCase() : "â’¶";
//     return firstLetter;
//   };

//   const acceptAudit = async (auditId) => {
//     try {
//       // Ensure userId is available before proceeding
//       if (!userId) {
//         console.log("User ID is not available.");
//         return;
//       }

//       // Update the audit to mark it as accepted
//       const auditRef = doc(db, "audits", auditId);
//       await updateDoc(auditRef, {
//         auditorId: userId, // Update the auditorId in the audit document
//         isAccepted: true, // Mark the audit as accepted
//       });

//       // Log audit acceptance
//       console.log(`Audit ${auditId} accepted and marked with auditorId ${userId}`);

//       // Add the auditId to the 'AcceptedAudits' array in the user's profile
//       const userRef = doc(db, "Profile", userId);

//       // Use arrayUnion to safely add the audit ID to the AcceptedAudits field
//       await updateDoc(userRef, {
//         AcceptedAudits: arrayUnion(auditId),
//       });

//       // Log successful update to user's profile
//       console.log(`Audit ID ${auditId} added to user's AcceptedAudits field!`);

//     } catch (error) {
//       console.error("Error accepting audit:", error);
//     }
//   };

//   const completeAudit = async (auditId) => {
//     try {
//       const auditRef = doc(db, "audits", auditId);
//       const auditSnapshot = await getDoc(auditRef);
//       const auditData = auditSnapshot.data();

//       if (auditData.isAccepted) {
//         await updateDoc(auditRef, {
//           isCompleted: true,
//         });

//         console.log("Audit marked as complete!");
//       } else {
//         console.log("Audit is not accepted, cannot mark as complete.");
//       }
//     } catch (error) {
//       console.error("Error completing audit:", error);
//     }
//   };

//   const filteredAudits = audits.filter((audit) => {
//     if (selectedStatus && audit.status !== selectedStatus) {
//       return false;
//     }
//     if (filterLocation && audit.location !== filterLocation) {
//       return false;
//     }
//     if (searchTerm && !audit.name.toLowerCase().includes(searchTerm.toLowerCase())) {
//       return false;
//     }
//     return true;
//   });

//   return (
//     <View style={styles.fullScreen}>
//       <ScrollView contentContainerStyle={{ flexGrow: 1 }}>
//         <View>
//           {userId ? (
//             <Text>Welcome, User ID: {userId}</Text>
//           ) : (
//             <Text>.</Text>
//           )}
//         </View>
  
//         <View style={styles.greetingContainer}>
//           <Text style={styles.greetingText}>{greeting}, {userName}</Text>
//         </View>
  
//         <View style={styles.container}>
//           <View style={styles.taskBoxesContainer}>
//             <TouchableOpacity style={styles.taskBox}>
//               <TouchableOpacity onPress={() => navigation.navigate("UserInfo")}>
//                 <Ionicons name="calendar" size={30} color="black" style={styles.icon} />
//                 <Text style={styles.taskBoxTitle}>Today's Tasks</Text>
//                 <Text style={styles.taskBoxContent}>{todayTasks.length} Tasks</Text>
//               </TouchableOpacity>
//             </TouchableOpacity>
  
//             <TouchableOpacity style={styles.taskBox}>
//               <TouchableOpacity onPress={() => navigation.navigate("Ongoing")}>
//                 <Ionicons name="play-circle" size={30} color="black" style={styles.icon} />
//                 <Text style={styles.taskBoxTitle}>Ongoing Tasks</Text>
//                 <Text style={styles.taskBoxContent}>{ongoingAudits.length} Tasks</Text>
//               </TouchableOpacity>
//             </TouchableOpacity>
//           </View>
  
//           <TouchableOpacity style={styles.taskBox2}>
//             <TouchableOpacity onPress={() => navigation.navigate("Completed-Tasks")}>
//               <Ionicons name="checkmark-circle" size={30} color="black" style={styles.icon} />
//               <Text style={styles.taskBoxTitle}>Completed Tasks</Text>
//               <Text style={styles.taskBoxContent}>{completedTasks.length} Tasks</Text>
//             </TouchableOpacity>
//           </TouchableOpacity>
  
//           <View style={styles.upcomingAuditsContainer}>
//             <Text style={styles.upcomingAuditsText}>Upcoming Audits</Text>
  
//             <FlatList
//               data={filteredAudits}
//               renderItem={({ item }) => {
//                 const clientName = clientsData[item.clientId] || "Unknown Client";
//                 const branch = branchesData.find((branch) => branch.id === item.branchId);
//                 const branchCity = branch ? branch.city : "Unknown Location";
  
//                 return (
//                   <TouchableOpacity
//                     style={styles.auditItem}
//                     onPress={() => navigation.navigate("AuditDetails", { audit: item })}
//                   >
//                     <View style={styles.clientImageContainer}>
//                       <Text style={styles.clientImage}>{getAvatar(item.auditorId)}</Text>
//                     </View>
//                     <View style={styles.auditContent}>
//                       <Text style={styles.auditTitle}>Audit: {item.auditName}</Text>
//                       <Text style={styles.clientName}>Client: {clientName}</Text>
//                       <Text style={styles.branch}>Branch: {branchCity}</Text>
//                     </View>
//                     <View style={styles.actionButtonsContainer}>
//                       <TouchableOpacity
//                         style={styles.acceptButton}
//                         onPress={() => acceptAudit(item.id)}
//                       >
//                         <Text style={styles.acceptButtonText}>Accept</Text>
//                       </TouchableOpacity>
//                       <TouchableOpacity
//                         style={styles.rejectButton}
//                         onPress={() => console.log("Reject audit")}
//                       >
//                         <Text style={styles.rejectButtonText}>Reject</Text>
//                       </TouchableOpacity>
//                     </View>
//                   </TouchableOpacity>
//                 );
//               }}
//               keyExtractor={(item) => item.id}
//             />
//           </View>
//         </View>
//       </ScrollView>
//     </View>
//   );
// };
  
// const styles = StyleSheet.create({
//   fullScreen: {
//     flex: 1,
//     backgroundColor: "#f5f5f5",
//   },
//   greetingContainer: {
//     padding: 20,
//     backgroundColor: "#fff",
//   },
//   greetingText: {
//     fontSize: 24,
//     fontWeight: "bold",
//     color: "#333",
//   },
//   container: {
//     flex: 1,
//     margin: 10,
//   },
//   taskBoxesContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     marginBottom: 20,
//   },
//   taskBox: {
//     backgroundColor: "#fff",
//     padding: 10,
//     width: "48%",
//     borderRadius: 10,
//     alignItems: "center",
//   },
//   taskBox2: {
//     backgroundColor: "#fff",
//     padding: 10,
//     width: "100%",
//     borderRadius: 10,
//     alignItems: "center",
//     marginBottom: 20,
//   },
//   taskBoxTitle: {
//     fontSize: 18,
//     fontWeight: "bold",
//   },
//   taskBoxContent: {
//     fontSize: 14,
//     color: "#555",
//   },
//   upcomingAuditsContainer: {
//     marginBottom: 20,
//   },
//   upcomingAuditsText: {
//     fontSize: 22,
//     fontWeight: "bold",
//     marginBottom: 10,
//   },
//   auditItem: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     padding: 15,
//     marginVertical: 5,
//     backgroundColor: "#fff",
//     borderRadius: 10,
//     alignItems: "center",
//   },
//   clientImageContainer: {
//     justifyContent: "center",
//     alignItems: "center",
//     marginRight: 10,
//   },
//   clientImage: {
//     backgroundColor: "#dcdcdc",
//     width: 40,
//     height: 40,
//     borderRadius: 20,
//     justifyContent: "center",
//     alignItems: "center",
//     textAlign: "center",
//     lineHeight: 40,
//     fontSize: 18,
//   },
//   auditContent: {
//     flex: 1,
//   },
//   auditTitle: {
//     fontSize: 16,
//     fontWeight: "bold",
//   },
//   clientName: {
//     fontSize: 14,
//     color: "#555",
//   },
//   branch: {
//     fontSize: 14,
//     color: "#555",
//   },
//   actionButtonsContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//   },
//   acceptButton: {
//     backgroundColor: "#4CAF50",
//     padding: 8,
//     borderRadius: 5,
//     marginRight: 10,
//   },
//   rejectButton: {
//     backgroundColor: "#f44336",
//     padding: 8,
//     borderRadius: 5,
//   },
//   acceptButtonText: {
//     color: "#fff",
//     fontWeight: "bold",
//   },
//   rejectButtonText: {
//     color: "#fff",
//     fontWeight: "bold",
//   },
// });

// export default HomeScreen;






























// import React, { useState, useEffect } from "react";
// import {
//   View,
//   Text,
//   TouchableOpacity,
//   StyleSheet,
//   ScrollView,
//   FlatList,
//   Dimensions,
//   Alert,
// } from "react-native";
// import { Ionicons } from "@expo/vector-icons";
// import { firebase } from "./firebaseConfig";
// import AsyncStorage from "@react-native-async-storage/async-storage";
// import { getDocs, collection, updateDoc, doc, arrayUnion } from "firebase/firestore";
// import { db } from "./firebaseConfig";

// const { width, height } = Dimensions.get("window");

// const HomeScreen = ({ navigation, route }) => {
//   const [userId, setUserId] = useState(null);
//   const userEmail = route?.params?.userEmail || "";
//   const [greeting, setGreeting] = useState("");
//   const [userName, setUserName] = useState("");
//   const [audits, setAudits] = useState([]);
//   const [ongoingAudits, setOngoingAudits] = useState([]);
//   const [todayTasks, setTodayTasks] = useState([]);
//   const [completedTasks, setCompletedTasks] = useState([]);
//   const [clientsData, setClientsData] = useState({});
//   const [branchesData, setBranchesData] = useState([]);
//   const [selectedStatus, setSelectedStatus] = useState("");
//   const [searchTerm, setSearchTerm] = useState("");
//   const [filterLocation, setFilterLocation] = useState("");
//   const [todayTasksCount, setTodayTasksCount] = useState(0);
//   const [completedTasksCount, setCompletedTasksCount] = useState(0); 
//   const [ongoingTasksCount, setOngoingTasksCount] = useState(0); 

//   useEffect(() => {
//     const loadData = async () => {
//       try {
//         const auditRef = collection(db, "audits");
//         const snapshot = await getDocs(auditRef);
//         const auditData = snapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setAudits(auditData);
        
// const today = new Date().toISOString().split("T")[0]; // Get today's date
// const todayCount = auditData.filter((audit) => audit.date === today).length;
// const ongoingCount = auditData.filter((audit) => audit.isAccepted && !audit.isComplete).length;
// const completedCount = auditData.filter((audit) => audit.isComplete).length;

// setTodayTasksCount(todayCount);
// setOngoingTasksCount(ongoingCount);
// setCompletedTasksCount(completedCount);


//         const ongoingAuditsData = await AsyncStorage.getItem("ongoingAudits");
//         if (ongoingAuditsData) {
//           setOngoingAudits(JSON.parse(ongoingAuditsData));
//         }

//         const clientsRef = collection(db, "clients");
//         const clientSnapshot = await getDocs(clientsRef);
//         const clients = {};
//         clientSnapshot.docs.forEach((doc) => {
//           clients[doc.id] = doc.data().name;
//         });
//         setClientsData(clients);

//         const branchesRef = collection(db, "branches");
//         const branchSnapshot = await getDocs(branchesRef);
//         const branches = branchSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setBranchesData(branches);

//         const tasksRef = collection(db, "tasks");
//         const taskSnapshot = await getDocs(tasksRef);
//         const taskData = taskSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setTodayTasks(taskData.filter((task) => task.status === "today"));
//         setCompletedTasks(taskData.filter((task) => task.status === "completed"));

//         const userDoc = await firebase
//           .firestore()
//           .collection("Profile")
//           .where("email", "==", userEmail)
//           .get();
//         if (!userDoc.empty) {
//           const userId = userDoc.docs[0].id;
//           setUserId(userId);
//         }
//       } catch (error) {
//         console.error("Error fetching data:", error);
//       }

//       const currentTime = new Date().getHours();
//       setGreeting(
//         currentTime < 12
//           ? "Good Morning"
//           : currentTime < 19
//           ? "Good Afternoon"
//           : "Good Evening"
//       );
//       setUserName(userEmail ? userEmail.split("@")[0] : "Auditor");
//     };

//     loadData();
//   }, [userEmail]);

//   // const acceptAudit = async (auditId) => {
//   //   try {
//   //     const auditRef = doc(db, "audits", auditId);
//   //     await updateDoc(auditRef, {
//   //       auditorId: userId,
//   //       isAccepted: true,
//   //     });

//   //     if (userId) {
//   //       const userRef = doc(db, "Profile", userId);
//   //       await updateDoc(userRef, {
//   //         AcceptedAudits: arrayUnion(auditId),
//   //       });

//   //       console.log("Audit accepted successfully!");
//   //     } else {
//   //       console.log("User ID is not available.");
//   //     }
//   //   } catch (error) {
//   //     console.error("Error accepting audit:", error);
//   //   }
//   // };

//   // const filteredAudits = audits.filter((audit) => {
//   //   if (selectedStatus && audit.status !== selectedStatus) {
//   //     return false;
//   //   }
//   //   if (filterLocation && audit.location !== filterLocation) {
//   //     return false;
//   //   }
//   //   if (searchTerm && !audit.name.toLowerCase().includes(searchTerm.toLowerCase())) {
//   //     return false;
//   //   }
//   //   if (audit.isAccepted === false) {
//   //     return false;
//   //   }
//   //   return true;
//   // });
  

//   const filteredAudits = audits.filter((audit) => {
//     // Filter audits based on the selectedStatus, filterLocation, searchTerm, and AcceptedBy
//     if (selectedStatus && audit.status !== selectedStatus) {
//       return false;
//     }
//     if (filterLocation && audit.location !== filterLocation) {
//       return false;
//     }
//     if (searchTerm && !audit.name.toLowerCase().includes(searchTerm.toLowerCase())) {
//       return false;
//     }
//     // Exclude audits that are already accepted by the current user
//     if (audit.AcceptedBy && audit.AcceptedBy.includes(userId)) {
//       return false;
//     }
//     return true;
//   });
  
//   const acceptAudit = async (auditId) => {
//     try {
//       const auditRef = doc(db, "audits", auditId);
//       await updateDoc(auditRef, {
//         auditorId: userId,
//         isAccepted: true,
//         AcceptedBy: arrayUnion(userId), // Add the current userId to the AcceptedBy array
//       });
  
//       if (userId) {
//         const userRef = doc(db, "Profile", userId);
//         await updateDoc(userRef, {
//           AcceptedAudits: arrayUnion(auditId),
//         });
  
//         console.log("Audit accepted successfully!");
//       } else {
//         console.log("User ID is not available.");
//       }
  
//       // Update the local audits state to reflect changes
//       setAudits((prevAudits) =>
//         prevAudits.map((audit) =>
//           audit.id === auditId
//             ? { ...audit, isAccepted: true, AcceptedBy: [...(audit.AcceptedBy || []), userId] }
//             : audit
//         )
//       );
//     } catch (error) {
//       console.error("Error accepting audit:", error);
//     }
//   };
  

//   const logout = () => {
//     Alert.alert(
//       "Logout",
//       "Are you sure you want to logout?",
//       [
//         {
//           text: "Cancel",
//           style: "cancel",
//         },
//         {
//           text: "Yes",
//           onPress: () => {
//             AsyncStorage.clear();
//             navigation.replace("LoginScreen");
//           },
//         },
//       ],
//       { cancelable: false }
//     );
//   };


//   return (
//     <View style={styles.fullScreen}>
//       <View>
//         {userId ? <Text>Welcome, User ID: {userId}</Text> : <Text>.</Text>}
//       </View>
//       <ScrollView contentContainerStyle={{ flexGrow: 1 }}>
//         <View style={styles.topRightIconContainer}>
         
//         </View>
//         <View style={styles.greetingContainer}>
//           <Text style={styles.greetingText}>
//             {greeting}, {userName}
//           </Text>
//         </View>

//         <View style={styles.container}>
//           <View style={styles.taskBoxesContainer}>
//             <TouchableOpacity style={styles.taskBox}>
//               <TouchableOpacity onPress={() => navigation.navigate("UserInfo")}>
//                 <Ionicons name="calendar" size={30} color="black" style={styles.icon} />
//                 <Text style={styles.taskBoxTitle}>Today's Tasks</Text>
//                 <Text style={styles.taskBoxContent}>{todayTasksCount} Tasks</Text>
//               </TouchableOpacity>
//             </TouchableOpacity>

//             <TouchableOpacity style={styles.taskBox}>
//               <TouchableOpacity onPress={() => navigation.navigate("Ongoing")}>
//                 <Ionicons name="play-circle" size={30} color="black" style={styles.icon} />
//                 <Text style={styles.taskBoxTitle}>Ongoing Tasks</Text>
//                 <Text style={styles.taskBoxContent}>{ongoingTasksCount} Tasks</Text>
//               </TouchableOpacity>
//             </TouchableOpacity>
//           </View>

//           <TouchableOpacity style={styles.taskBox2}>
//             <TouchableOpacity onPress={() => navigation.navigate("CompletedTasks")}>
//               <Ionicons name="checkmark-circle" size={30} color="black" style={styles.icon} />
//               <Text style={styles.taskBoxTitle}>Completed Tasks</Text>
//               <Text style={styles.taskBoxContent}>{completedTasksCount} Tasks</Text>
//             </TouchableOpacity>
//           </TouchableOpacity>



//           <View style={styles.upcomingAuditsContainer}>
//             <Text style={styles.upcomingAuditsText}>Upcoming Audits</Text>

//             <FlatList
//               data={filteredAudits}
//               renderItem={({ item }) => (
//                 <TouchableOpacity
//                   style={styles.auditItem}
//                   onPress={() => navigation.navigate("AuditDetails", { audit: item })}
//                 >
//                   <View style={styles.auditContent}>
//                     <Text style={styles.auditName}>{item.name}</Text>
//                     <Text style={styles.auditLocation}>
//                       {clientsData[item.clientId] || "Unknown Client"}
//                     </Text>
//                     <Text style={styles.auditLocation}>
//                       {branchesData.find((branch) => branch.id === item.branchId)?.city ||
//                         "Unknown Location"}
//                     </Text>
//                   </View>
//                   <View style={styles.actionsContainer}>
//                     <TouchableOpacity
//                       style={styles.acceptButton}
//                       onPress={() => navigation.navigate("AuditDetails", { audit: item })}
//                     >
//                       <Text style={styles.buttonText}>See More</Text>
//                     </TouchableOpacity>
//                   </View>
//                 </TouchableOpacity>
//               )}
//               keyExtractor={(item) => item.id}
//             />
//           </View>
//         </View>
//       </ScrollView>
//     </View>
//   );
// };



// const styles = StyleSheet.create({
//   fullScreen: {
//     flex: 1,
//     backgroundColor: "#f5f5f5",
//   },
//   greetingContainer: {
//     padding: 15,
//     backgroundColor: "#6200ea",
//   },
//   greetingText: {
//     color: "#fff",
//     fontSize: 18,
//     fontWeight: "bold",
//   },
//   container: {
//     padding: 20,
//   },
//   taskBoxesContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     marginBottom: 20,
//   },
//   taskBox: {
//     width: (width - 60) / 2,
//     backgroundColor: "#fff",
//     padding: 15,
//     borderRadius: 10,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 5,
//     elevation: 3,
//   },
//   taskBox2: {
//     width: width - 40,
//     backgroundColor: "#fff",
//     padding: 15,
//     borderRadius: 10,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 5,
//     elevation: 3,
//     marginBottom: 20,
//   },
//   taskBoxTitle: {
//     fontSize: 18,
//     fontWeight: "bold",
//     marginTop: 10,
//   },
//   taskBoxContent: {
//     fontSize: 16,
//     color: "#888",
//     marginTop: 5,
//   },
//   icon: {
//     alignSelf: "center",
//   },
//   upcomingAuditsContainer: {
//     marginTop: 20,
//   },
//   upcomingAuditsText: {
//     fontSize: 20,
//     fontWeight: "bold",
//     marginBottom: 10,
//   },
//   auditItem: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     alignItems: "center",
//     backgroundColor: "#fff",
//     padding: 15,
//     borderRadius: 10,
//     marginBottom: 10,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.1,
//     shadowRadius: 5,
//     elevation: 3,
//   },
//   auditContent: {
//     flex: 1,
//   },
//   auditName: {
//     fontSize: 18,
//     fontWeight: "bold",
//   },
//   auditLocation: {
//     fontSize: 16,
//     color: "#888",
//   },
//   actionsContainer: {
//     flexDirection: "row",
//     alignItems: "center",
//   },
//   acceptButton: {
//     backgroundColor: "#4caf50",
//     padding: 10,
//     borderRadius: 5,
//   },
//   buttonText: {
//     color: "#fff",
//     fontWeight: "bold",
//   },
//   topRightIconContainer: {
//     position: "absolute",
//     top: 40,
//     right: 15,
//     zIndex: 1,
//   },
// });

// export default HomeScreen;







//############################################## AUDIT ############################################################################################


// import React, { useState, useEffect } from "react";
// import { View, Text, StyleSheet, TouchableOpacity, TextInput, ScrollView, ActivityIndicator } from "react-native";
// import AsyncStorage from "@react-native-async-storage/async-storage";
// import { Ionicons } from "@expo/vector-icons";
// import { getFirestore, doc, getDoc, updateDoc, arrayUnion, arrayRemove } from "firebase/firestore";
// import { app } from "./firebaseConfig"; // Import Firebase configuration

// const db = getFirestore(app);

// const AuditDetails = ({ route, navigation }) => {
//   const { audit } = route.params; // Getting the audit passed from the previous screen
//   const [notes, setNotes] = useState(""); // State for storing notes
//   const [auditDetails, setAuditDetails] = useState(null); // State to store fetched audit details
//   const [branchDetails, setBranchDetails] = useState(null); // State for storing branch details
//   const [clientDetails, setClientDetails] = useState(null); // State for storing client details
//   const [isAcceptedByUser, setIsAcceptedByUser] = useState(false); // State to check if the user has accepted the audit
//   const [loading, setLoading] = useState(true); // Loading state

//   // Fetch audit data and related info when component mounts
//   useEffect(() => {
//     const fetchAuditDetails = async () => {
//       try {
//         // Fetch audit details
//         const auditRef = doc(db, "audits", audit.id);
//         const auditSnap = await getDoc(auditRef);

//         if (auditSnap.exists()) {
//           const auditData = auditSnap.data();
//           setAuditDetails(auditData);

//           // Check if the user has already accepted the audit
//           const userId = await AsyncStorage.getItem("userId");
//           if (userId && auditData.acceptedBy && auditData.acceptedBy === userId) {
//             setIsAcceptedByUser(true);
//           }

//           // Fetch branch details based on branchId
//           const branchRef = doc(db, "branches", auditData.branchId);
//           const branchSnap = await getDoc(branchRef);
//           if (branchSnap.exists()) {
//             setBranchDetails(branchSnap.data());
//           } else {
//             console.log("Branch not found!");
//           }

//           // Fetch client details based on clientId
//           const clientRef = doc(db, "clients", auditData.clientId);
//           const clientSnap = await getDoc(clientRef);
//           if (clientSnap.exists()) {
//             setClientDetails(clientSnap.data());
//           } else {
//             console.log("Client not found!");
//           }
//         } else {
//           console.log("Audit not found!");
//         }

//         setLoading(false); // Stop loading once data is fetched
//       } catch (error) {
//         console.error("Error fetching audit details:", error);
//         setLoading(false); // Stop loading in case of error
//       }
//     };

//     fetchAuditDetails();
//   }, [audit.id]);

//   const handleAccept = async () => {
//     try {
//       const userId = await AsyncStorage.getItem("userId"); // Get the logged-in user's ID
//       if (!userId) {
//         console.error("User ID not found!");
//         return;
//       }

//       // Firebase: Update the isAccepted field and notes in Firestore
//       const auditRef = doc(db, "audits", audit.id);
//       await updateDoc(auditRef, {
//         isAccepted: true, // Set isAccepted to true
//         notes: notes,     // Store the notes provided by the user
//         acceptedBy: userId // Save the userId of the person accepting
//       });

//       // Update the user's Profile collection to include the auditId
//       const userRef = doc(db, "Profile", userId);
//       await updateDoc(userRef, {
//         AcceptedAudits: arrayUnion(audit.id), // Append the auditId to the AcceptedAudits array
//       });

//       // Update the local state
//       setIsAcceptedByUser(true);

//       // Navigate to ongoing tasks screen
//       navigation.navigate("Ongoing");
//     } catch (error) {
//       console.error("Error accepting audit", error);
//     }
//   };

//   const handleUnaccept = async () => {
//     try {
//       const userId = await AsyncStorage.getItem("userId"); // Get the logged-in user's ID
//       if (!userId) {
//         console.error("User ID not found!");
//         return;
//       }
  
//       // Firebase: Update the isAccepted field to false (unaccept)
//       const auditRef = doc(db, "audits", audit.id);
//       await updateDoc(auditRef, {
//         isAccepted: false, // Set isAccepted to false (unaccepted)
//         acceptedBy: null,  // Remove the user from acceptedBy
//       });
  
//       // Remove the auditId from the AcceptedAudits array in the user's Profile collection
//       const userRef = doc(db, "Profile", userId);
//       await updateDoc(userRef, {
//         AcceptedAudits: arrayRemove(audit.id), // Remove the auditId from the AcceptedAudits array
//       });
  
//       // Update the local state
//       setIsAcceptedByUser(false);
  
//       // Navigate to the "Ongoing" screen after state update
//       setTimeout(() => {
//         navigation.navigate("Ongoing"); // Explicitly navigate to Ongoing
//       }, 500); // Adjust timeout if needed
//     } catch (error) {
//       console.error("Error unaccepting audit", error);
//     }
//   };
  

//   if (loading) {
//     return (
//       <View style={styles.loadingContainer}>
//         <ActivityIndicator size="large" color="#4CAF50" />
//         <Text style={styles.loadingText}>Loading Audit Details...</Text>
//       </View>
//     );
//   }


//   // Function to display all fields of an object dynamically
//   const renderFields = (data) => {
//     return Object.keys(data).map((key) => (
//       <Text key={key} style={styles.detailText}>
//         {key}: {data[key]}
//       </Text>
//     ));
//   };

//   return (
    
//     <View style={styles.container}>
//       <ScrollView contentContainerStyle={styles.scrollView}>
//         {auditDetails && branchDetails && clientDetails ? (
//           <>
//             <Text style={styles.title}>{auditDetails.title}</Text>

//             <View style={styles.detailsSection}>
//               <Text style={styles.subTitle}>Branch Details:</Text>
//               {renderFields(branchDetails)}
//               <View style= {{marginTop:10}}>
//               <Text style={styles.subTitle}>Client Details:</Text>
//               {renderFields(clientDetails)}
//             </View>
//             </View>

           

           

//             <View style={styles.buttonsContainer}>
             
//                 <TouchableOpacity style={styles.acceptButton} onPress={handleAccept}>
//                   <Ionicons name="checkmark-circle" size={24} color="white" />
//                   <Text style={styles.buttonText}>Accept Audit</Text>
//                 </TouchableOpacity>
              
//             </View>
//           </>
//         ) : (
//           <Text style={styles.errorText}>No data found!</Text>
//         )}
//       </ScrollView>
//     </View>
//   );
// };



// //afte adding calender.........


// import React, { useState, useEffect } from "react";
// import { View, Text, StyleSheet, TouchableOpacity, ScrollView, ActivityIndicator } from "react-native";
// import AsyncStorage from "@react-native-async-storage/async-storage";
// import { Ionicons } from "@expo/vector-icons";
// import { getFirestore, doc, getDoc, updateDoc, setDoc } from "firebase/firestore";
// import { app } from "./firebaseConfig"; // Import Firebase configuration
// import DateTimePicker from "@react-native-community/datetimepicker";

// const db = getFirestore(app);

// const AuditDetails = ({ route, navigation }) => {
//   const { audit } = route.params; // Getting the audit passed from the previous screen
//   const [notes, setNotes] = useState(""); // State for storing notes
//   const [auditDetails, setAuditDetails] = useState(null); // State to store fetched audit details
//   const [branchDetails, setBranchDetails] = useState(null); // State for storing branch details
//   const [clientDetails, setClientDetails] = useState(null); // State for storing client details
//   const [isAcceptedByUser, setIsAcceptedByUser] = useState(false); // State to check if the user has accepted the audit
//   const [loading, setLoading] = useState(true); // Loading state
//   const [showCalendar, setShowCalendar] = useState(false); // State to toggle calendar visibility
//   const [selectedDate, setSelectedDate] = useState(new Date()); // State to store selected date

//   useEffect(() => {
//     const fetchAuditDetails = async () => {
//       try {
//         // Fetch audit details
//         const auditRef = doc(db, "audits", audit.id);
//         const auditSnap = await getDoc(auditRef);

//         if (auditSnap.exists()) {
//           const auditData = auditSnap.data();
//           setAuditDetails(auditData);

//           // Check if the user has already accepted the audit
//           const userId = await AsyncStorage.getItem("userId");
//           if (userId && auditData.acceptedBy && auditData.acceptedBy === userId) {
//             setIsAcceptedByUser(true);
//           }

//           // Fetch branch details based on branchId
//           const branchRef = doc(db, "branches", auditData.branchId);
//           const branchSnap = await getDoc(branchRef);
//           if (branchSnap.exists()) {
//             const branchData = branchSnap.data();
//             delete branchData.clientId; // Remove clientId from branch details
//             setBranchDetails(branchData);
//           } else {
//             console.log("Branch not found!");
//           }

//           // Fetch client details based on clientId
//           const clientRef = doc(db, "clients", auditData.clientId);
//           const clientSnap = await getDoc(clientRef);
//           if (clientSnap.exists()) {
//             setClientDetails(clientSnap.data());
//           } else {
//             console.log("Client not found!");
//           }
//         } else {
//           console.log("Audit not found!");
//         }

//         setLoading(false); // Stop loading once data is fetched
//       } catch (error) {
//         console.error("Error fetching audit details:", error);
//         setLoading(false); // Stop loading in case of error
//       }
//     };

//     fetchAuditDetails();
//   }, [audit.id]);

//   const handleAccept = () => {
//     setShowCalendar(true); // Show calendar when the accept button is clicked
//   };

//   const handleDateConfirm = async (event, date) => {
//     if (event.type === "set" && date) {
//       setShowCalendar(false); // Hide the calendar
  
//       // Format the selected date to "YYYY-MM-DD" (no time)
//       const formattedDate = date.toISOString().split("T")[0];
//       setSelectedDate(new Date(formattedDate)); // Update the selected date state
  
//       try {
//         const userId = await AsyncStorage.getItem("userId"); // Get the logged-in user's ID
//         if (!userId) {
//           console.error("User ID not found!");
//           return;
//         }
  
//         // Firebase: Update the `audits` document
//         const auditRef = doc(db, "audits", audit.id);
//         await updateDoc(auditRef, {
//           isAccepted: true, // Mark the audit as accepted
//           date: formattedDate, // Save the selected date
//           auditors: arrayUnion(userId), // Add the auditor's ID to an array of auditors
//         });
  
//         // Create a new `acceptedBy` sub-collection in the `audits` document
//         const acceptedByRef = doc(db, `audits/${audit.id}/acceptedBy`, userId);
//         await setDoc(acceptedByRef, {
//           auditId: audit.id, // Store the audit ID
//           date: formattedDate, // Save the selected date
//         });
  
//         // Update the local state
//         setIsAcceptedByUser(true);
  
//         // Navigate to ongoing tasks screen
//         navigation.navigate("Ongoing");
//       } catch (error) {
//         console.error("Error accepting audit", error);
//       }
//     } else {
//       setShowCalendar(false); // Close the calendar if canceled
//     }
//   };
  

//   return (
//     <View style={styles.container}>
//       <ScrollView contentContainerStyle={styles.scrollView}>
//         {auditDetails && branchDetails && clientDetails ? (
//           <>
//             <Text style={styles.title}>{auditDetails.title}</Text>

//             <View style={styles.detailsSection}>
//             <Text style={styles.subTitle}>Client Details:</Text>
//             {renderFields(clientDetails)}
//             <View style={{ marginTop: 10 }}>
//               <Text style={styles.subTitle}>Branch Details:</Text>
//               {renderFields(branchDetails)}
            
               
//               </View>
//             </View>

//             <View style={styles.buttonsContainer}>
//               <TouchableOpacity style={styles.acceptButton} onPress={handleAccept}>
//                 <Ionicons name="checkmark-circle" size={24} color="white" />
//                 <Text style={styles.buttonText}>Accept Audit</Text>
//               </TouchableOpacity>
//             </View>
//           </>
//         ) : (
//           <Text style={styles.errorText}>No data found!</Text>
//         )}
//       </ScrollView>

//       {showCalendar && (
//         <DateTimePicker
//           value={selectedDate}
//           mode="date"
//           display="default"
//           onChange={handleDateConfirm}
//         />
//       )}
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   container: {
//     flex: 1,
//     padding: 20,
//     backgroundColor: "#fff",
//   },
//   loadingContainer: {
//     flex: 1,
//     justifyContent: "center",
//     alignItems: "center",
//     backgroundColor: "#f7f7f7",
//   },
//   loadingText: {
//     marginTop: 10,
//     fontSize: 16,
//     color: "#4CAF50",
//   },
//   scrollView: {
//     paddingBottom: 20,
//   },
//   title: {
//     fontSize: 26,
//     fontWeight: "bold",
//     color: "#333",
//     marginBottom: 15,
//   },
//   detailsSection: {
//     marginBottom: 20,
//     padding: 15,
//     backgroundColor: "#f9f9f9",
//     borderRadius: 8,
//   },
//   subTitle: {
//     fontSize: 18,
//     marginBottom: 10,
//     color: "black",
//     fontWeight: "bold",
//   },
//   detailText: {
//     fontSize: 16,
//     marginBottom: 8,
//     color: "#333",
//   },
//   buttonsContainer: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     marginTop: 20,
//   },
//   acceptButton: {
//     backgroundColor: "#4CAF50",
//     paddingVertical: 12,
//     paddingHorizontal: 30,
//     borderRadius: 8,
//     flexDirection: "row",
//     justifyContent: "center",
//     alignItems: "center",
//   },
//   buttonText: {
//     fontSize: 16,
//     color: "#fff",
//     marginLeft: 10,
//   },
//   errorText: {
//     color: "red",
//     fontSize: 18,
//     textAlign: "center",
//   },
// });

// export default AuditDetails;
