
// import React, { useState, useEffect } from 'react';
// import { View, Text, TouchableOpacity, StyleSheet, ScrollView, FlatList, Dimensions } from "react-native";
// import { Ionicons } from "@expo/vector-icons";
// import { firebase } from './firebaseConfig';
// import AsyncStorage from '@react-native-async-storage/async-storage';
// import { getDocs, collection, updateDoc, doc, arrayUnion, onSnapshot, getDoc } from "firebase/firestore"; // Import onSnapshot

// import { db } from "./firebaseConfig";

// const { width, height } = Dimensions.get("window");

// const HomeScreen = ({ navigation, route }) => {
//   const [userId, setUserId] = useState(null);
//   const userEmail = route?.params?.userEmail || "";
//   const [greeting, setGreeting] = useState("");
//   const [userName, setUserName] = useState("");
//   const [audits, setAudits] = useState([]);
//   const [ongoingAudits, setOngoingAudits] = useState([]);
//   const [todayTasks, setTodayTasks] = useState([]);
//   const [completedTasks, setCompletedTasks] = useState([]);
//   const [clientsData, setClientsData] = useState({});
//   const [branchesData, setBranchesData] = useState([]);
//   const [selectedStatus, setSelectedStatus] = useState("");
//   const [searchTerm, setSearchTerm] = useState("");
//   const [filterLocation, setFilterLocation] = useState("");

//   useEffect(() => {
//     let unsubscribe; // Declare unsubscribe here

//     const loadData = async () => {
//       try {
//         // Fetch audits from Firebase collection 'audits'
//         const auditRef = collection(db, "audits");

//         // Real-time listener for updates on audits
//         unsubscribe = onSnapshot(auditRef, (snapshot) => { // Initialize unsubscribe here
//           const auditData = snapshot.docs.map((doc) => ({
//             id: doc.id,
//             ...doc.data(),
//           }));
//           setAudits(auditData); // Update audits with real-time data
//         });

//         // Fetch ongoing audits from AsyncStorage
//         const ongoingAuditsData = await AsyncStorage.getItem("ongoingAudits");
//         if (ongoingAuditsData) {
//           setOngoingAudits(JSON.parse(ongoingAuditsData));
//         }

//         // Fetch clients from 'clients' collection
//         const clientsRef = collection(db, "clients");
//         const clientSnapshot = await getDocs(clientsRef);
//         const clients = {};
//         clientSnapshot.docs.forEach((doc) => {
//           clients[doc.id] = doc.data().name;
//         });
//         setClientsData(clients);

//         // Fetch branches from 'branches' collection
//         const branchesRef = collection(db, "branches");
//         const branchSnapshot = await getDocs(branchesRef);
//         const branches = branchSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setBranchesData(branches);

//         // Fetch tasks from 'tasks' collection
//         const tasksRef = collection(db, "tasks");
//         const taskSnapshot = await getDocs(tasksRef);
//         const taskData = taskSnapshot.docs.map((doc) => ({
//           id: doc.id,
//           ...doc.data(),
//         }));
//         setTodayTasks(taskData.filter(task => task.status === 'today'));
//         setCompletedTasks(taskData.filter(task => task.status === 'completed'));

//         // Fetch the logged-in user's ID
//         const userDoc = await firebase.firestore().collection('Profile').where("email", "==", userEmail).get();
//         if (!userDoc.empty) {
//           const userId = userDoc.docs[0].id;
//           setUserId(userId); // Set the logged-in user's document ID
//         }

//       } catch (error) {
//         console.error("Error fetching data:", error);
//       }

//       // Set greeting based on time
//       const currentTime = new Date().getHours();
//       setGreeting(currentTime < 12 ? "Good Morning" : currentTime < 19 ? "Good Afternoon " : "Good Evening");
//       setUserName(userEmail ? userEmail.split("@")[0] : "User");
//     };

//     loadData();

//     // Clean up the listener when the component unmounts
//     return () => {
//       if (unsubscribe) {
//         unsubscribe(); // Call unsubscribe to stop listening to updates
//       }
//     };

//   }, [userEmail]);

//   const getAvatar = (Client) => {
//     const firstLetter = Client ? Client.charAt(0).toUpperCase() : "â’¶";
//     return firstLetter;
//   };

//   const acceptAudit = async (auditId) => {
//     try {
//       const auditRef = doc(db, "audits", auditId);

//       // Update the audit to mark it as accepted and save userId in AcceptedBy
//       await updateDoc(auditRef, {
//         auditorId: userId,
//         isAccepted: true,
//         AcceptedBy: userId, // Save the user ID in the AcceptedBy field
//       });

//       // Fetch the audit document to get the userId from the AcceptedBy field
//       const auditSnapshot = await getDoc(auditRef);
//       const auditData = auditSnapshot.data();

//       if (auditData && auditData.AcceptedBy) {
//         const userRef = doc(db, "Profile", auditData.AcceptedBy);

//         // Add the auditId to the user's AcceptedAudits array in the Profile collection
//         await updateDoc(userRef, {
//           AcceptedAudits: arrayUnion(auditId),  // Ensure no duplicates
//         });

//         console.log("Audit accepted and added to the user's AcceptedAudits!");
//       } else {
//         console.log("No AcceptedBy field found in the audit document.");
//       }

//     } catch (error) {
//       console.error("Error accepting audit:", error);
//     }
//   };

//   const completeAudit = async (auditId) => {
//     try {
//       const auditRef = doc(db, "audits", auditId);
//       const auditSnapshot = await getDoc(auditRef);
//       const auditData = auditSnapshot.data();

//       if (auditData.isAccepted) {
//         await updateDoc(auditRef, {
//           isCompleted: true,
//         });

//         console.log("Audit marked as complete!");
//       } else {
//         console.log("Audit is not accepted, cannot mark as complete.");
//       }
//     } catch (error) {
//       console.error("Error completing audit:", error);
//     }
//   };

//   const filteredAudits = audits.filter((audit) => {
//     if (selectedStatus && audit.status !== selectedStatus) {
//       return false;
//     }
//     if (filterLocation && audit.location !== filterLocation) {
//       return false;
//     }
//     if (searchTerm && !audit.name.toLowerCase().includes(searchTerm.toLowerCase())) {
//       return false;
//     }
//     return true;
//   });

//   return (
//     <View style={styles.fullScreen}>
//       <ScrollView contentContainerStyle={{ flexGrow: 1 }}>
//         <View>
//           {userId ? (
//             <Text>Welcome, User ID: {userId}</Text>
//           ) : (
//             <Text>.</Text>
//           )}
//         </View>
  
//         <View style={styles.greetingContainer}>
//           <Text style={styles.greetingText}>{greeting}, {userName}</Text>
//         </View>
  
//         <View style={styles.container}>
//           <View style={styles.taskBoxesContainer}>
//             <TouchableOpacity style={styles.taskBox}>
//               <TouchableOpacity onPress={() => navigation.navigate("UserInfo")}>
//                 <Ionicons name="calendar" size={30} color="black" style={styles.icon} />
//                 <Text style={styles.taskBoxTitle}>Today's Tasks</Text>
//                 <Text style={styles.taskBoxContent}>{todayTasks.length} Tasks</Text>
//               </TouchableOpacity>
//             </TouchableOpacity>
  
//             <TouchableOpacity style={styles.taskBox}>
//               <TouchableOpacity onPress={() => navigation.navigate("Ongoing")}>
//                 <Ionicons name="play-circle" size={30} color="black" style={styles.icon} />
//                 <Text style={styles.taskBoxTitle}>Ongoing Tasks</Text>
//                 <Text style={styles.taskBoxContent}>{ongoingAudits.length} Tasks</Text>
//               </TouchableOpacity>
//             </TouchableOpacity>
//           </View>
  
//           <TouchableOpacity style={styles.taskBox2}>
//             <TouchableOpacity onPress={() => navigation.navigate("Completed-Tasks")}>
//               <Ionicons name="checkmark-circle" size={30} color="black" style={styles.icon} />
//               <Text style={styles.taskBoxTitle}>Completed Tasks</Text>
//               <Text style={styles.taskBoxContent}>{completedTasks.length} Tasks</Text>
//             </TouchableOpacity>
//           </TouchableOpacity>
  
//           <View style={styles.upcomingAuditsContainer}>
//             <Text style={styles.upcomingAuditsText}>Upcoming Audits</Text>
  
//             <FlatList
//               data={filteredAudits}
//               renderItem={({ item }) => {
//                 const clientName = clientsData[item.clientId] || "Unknown Client";
//                 const branch = branchesData.find((branch) => branch.id === item.branchId);
//                 const branchName = branch ? branch.name : "Unknown Branch";

//                 return (
//                   <TouchableOpacity
//                     style={styles.auditItem}
//                     onPress={() => navigation.navigate("AuditDetails", { auditId: item.id })} // Fixed screen name here
//                   >
//                     <View style={styles.clientImageContainer}>
//                       <Text style={styles.clientImage}>{getAvatar(clientName)}</Text>
//                     </View>
//                     <View style={styles.auditDetails}>
//                       <Text style={styles.auditTitle}>{clientName}</Text>
//                       <Text style={styles.auditText}>Branch: {branchName}</Text>
//                       <Text style={styles.auditText}>Location: {item.location}</Text>
//                       <Text style={styles.auditText}>Date: {item.date}</Text>
//                     </View>
//                     <TouchableOpacity
//                       style={styles.acceptButton}
//                       onPress={() => acceptAudit(item.id)}
//                     >
//                       <Text style={styles.acceptButtonText}>Accept</Text>
//                     </TouchableOpacity>
//                   </TouchableOpacity>
//                 );
//               }}
//               keyExtractor={(item) => item.id}
//             />
//           </View>
//         </View>
//       </ScrollView>
//     </View>
//   );
// };

// const styles = StyleSheet.create({
//   fullScreen: {
//     flex: 1,
//   },
//   greetingContainer: {
//     paddingTop: 30,
//     paddingHorizontal: 20,
//   },
//   greetingText: {
//     fontSize: 30,
//     fontWeight: "bold",
//   },
//   container: {
//     paddingTop: 30,
//   },
//   taskBoxesContainer: {
//     flexDirection: "row",
//     justifyContent: "space-around",
//   },
//   taskBox: {
//     width: width * 0.4,
//     height: 120,
//     backgroundColor: "#F3F4F6",
//     justifyContent: "center",
//     alignItems: "center",
//     borderRadius: 15,
//     margin: 10,
//   },
//   taskBox2: {
//     width: width * 0.9,
//     height: 120,
//     backgroundColor: "#F3F4F6",
//     justifyContent: "center",
//     alignItems: "center",
//     borderRadius: 15,
//     margin: 10,
//   },
//   taskBoxTitle: {
//     fontSize: 18,
//     fontWeight: "bold",
//   },
//   taskBoxContent: {
//     fontSize: 14,
//     marginTop: 5,
//   },
//   upcomingAuditsContainer: {
//     marginTop: 20,
//     paddingHorizontal: 20,
//   },
//   upcomingAuditsText: {
//     fontSize: 22,
//     fontWeight: "bold",
//   },
//   auditItem: {
//     flexDirection: "row",
//     backgroundColor: "#FFF",
//     marginBottom: 15,
//     padding: 10,
//     borderRadius: 8,
//     shadowColor: "#000",
//     shadowOffset: { width: 0, height: 2 },
//     shadowOpacity: 0.25,
//     shadowRadius: 3.5,
//     elevation: 5,
//   },
//   clientImageContainer: {
//     justifyContent: "center",
//     alignItems: "center",
//     width: 50,
//     height: 50,
//     backgroundColor: "#D1D5DB",
//     borderRadius: 25,
//     marginRight: 10,
//   },
//   clientImage: {
//     fontSize: 24,
//     fontWeight: "bold",
//     color: "#FFF",
//   },
//   auditDetails: {
//     flex: 1,
//     justifyContent: "center",
//   },
//   auditTitle: {
//     fontSize: 18,
//     fontWeight: "bold",
//   },
//   auditText: {
//     fontSize: 14,
//   },
//   acceptButton: {
//     justifyContent: "center",
//     alignItems: "center",
//     backgroundColor: "#4CAF50",
//     paddingVertical: 5,
//     paddingHorizontal: 15,
//     borderRadius: 5,
//   },
//   acceptButtonText: {
//     color: "#FFF",
//     fontWeight: "bold",
//   },
// });

// export default HomeScreen;
